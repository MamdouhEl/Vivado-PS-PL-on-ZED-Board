-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TrellisBuilder_TrellisBuilder_Pipeline_VITIS_LOOP_1452_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_Result_s : IN STD_LOGIC_VECTOR (87 downto 0);
    Bucket_V : IN STD_LOGIC_VECTOR (2 downto 0);
    choice_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_1_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_2_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_3_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_4_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_5_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_47_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_46_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_45_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_44_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_43_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_42_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_41_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_40_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_39_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_38_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_37_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_36_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_35_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_34_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_33_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_32_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_31_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_30_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_29_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_28_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_27_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_26_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_25_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_24_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_23_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_22_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_21_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_20_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_19_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_18_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_17_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_16_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_15_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_14_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_13_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_12_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_11_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_10_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_9_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_8_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_7_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_6_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    prevState_V_0_10_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_1_10_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_2_4_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_3_4_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_0_4_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_1_4_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_2_10_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_3_10_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_0_9_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_1_9_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_2_3_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_3_3_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_0_3_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_1_3_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_2_9_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_3_9_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_0_8_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_1_8_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_2_2_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_3_2_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_0_2_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_1_2_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_2_8_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_3_8_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_0_7_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_1_7_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_2_1_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_3_1_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_0_1_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_1_1_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_2_7_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_3_7_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_0_6_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_1_6_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_2_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_3_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_0_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_1_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_2_6_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_3_6_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_0_11_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_1_11_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_2_5_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_3_5_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_0_5_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_1_5_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_2_11_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_3_11_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    p_Val2_1_out : OUT STD_LOGIC_VECTOR (87 downto 0);
    p_Val2_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of TrellisBuilder_TrellisBuilder_Pipeline_VITIS_LOOP_1452_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_53 : STD_LOGIC_VECTOR (7 downto 0) := "01010011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_56 : STD_LOGIC_VECTOR (6 downto 0) := "1010110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_2E : STD_LOGIC_VECTOR (5 downto 0) := "101110";
    constant ap_const_lv6_23 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_const_lv6_1C : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_const_lv6_11 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_const_lv6_D : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv6_33 : STD_LOGIC_VECTOR (5 downto 0) := "110011";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv6_22 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_const_lv6_1D : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_C : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_3D : STD_LOGIC_VECTOR (5 downto 0) := "111101";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_2C : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv6_13 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_const_lv6_F : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_2D : STD_LOGIC_VECTOR (5 downto 0) := "101101";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv6_12 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_const_lv6_E : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_3B : STD_LOGIC_VECTOR (5 downto 0) := "111011";
    constant ap_const_lv6_36 : STD_LOGIC_VECTOR (5 downto 0) := "110110";
    constant ap_const_lv6_2A : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_const_lv6_27 : STD_LOGIC_VECTOR (5 downto 0) := "100111";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_15 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_const_lv6_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_3A : STD_LOGIC_VECTOR (5 downto 0) := "111010";
    constant ap_const_lv6_37 : STD_LOGIC_VECTOR (5 downto 0) := "110111";
    constant ap_const_lv6_2B : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_const_lv6_26 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv6_34 : STD_LOGIC_VECTOR (5 downto 0) := "110100";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv6_25 : STD_LOGIC_VECTOR (5 downto 0) := "100101";
    constant ap_const_lv6_1A : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_const_lv6_B : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv6_1B : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_29 : STD_LOGIC_VECTOR (5 downto 0) := "101001";
    constant ap_const_lv6_35 : STD_LOGIC_VECTOR (5 downto 0) := "110101";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1452_fu_1040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal tmp_20_fu_2276_p11 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_2610 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_21_fu_2300_p11 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_2615 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_2324_p11 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_2620 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_2348_p11 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_2625 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_2372_p11 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_2630 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_2396_p11 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_reg_2635 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_2420_p11 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_2640 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_2444_p11 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_2645 : STD_LOGIC_VECTOR (0 downto 0);
    signal Bucket_V_1_fu_402 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1483_fu_2228_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_Bucket_V_1_load : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal empty_41_fu_1589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_56_fu_1679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_71_fu_1769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_86_fu_1859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_101_fu_1949_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_fu_2039_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_131_fu_2129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal prevState2_V_fu_406 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1452_fu_2468_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_fu_410 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_1_fu_2522_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_fu_414 : STD_LOGIC_VECTOR (87 downto 0);
    signal p_Result_1_fu_2512_p4 : STD_LOGIC_VECTOR (87 downto 0);
    signal count_fu_418 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1491_fu_1046_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_count_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln1065_fu_1069_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_1073_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_1087_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1101_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_1111_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_1125_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_1139_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_1149_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_1163_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_1177_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_1187_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_fu_1201_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1215_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_1225_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_1239_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_1253_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_1263_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_fu_1277_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_1291_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_1301_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_1315_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_1101_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_1139_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_1177_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1215_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_1253_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_1291_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_1315_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln1455_fu_1055_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_fu_1325_p89 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_28_fu_1511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_27_fu_1505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_34_fu_1547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_29_fu_1517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_36_fu_1559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_30_fu_1523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_37_fu_1565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_31_fu_1529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_38_fu_1571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_32_fu_1535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_fu_1577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_33_fu_1541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_40_fu_1583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_35_fu_1553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_42_fu_1595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_43_fu_1601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_49_fu_1637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_44_fu_1607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_51_fu_1649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_45_fu_1613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_52_fu_1655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_46_fu_1619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_53_fu_1661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_47_fu_1625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_fu_1667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_fu_1631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_55_fu_1673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_50_fu_1643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_57_fu_1685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_58_fu_1691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_64_fu_1727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_59_fu_1697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_66_fu_1739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_60_fu_1703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_67_fu_1745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_61_fu_1709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_68_fu_1751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_62_fu_1715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_69_fu_1757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_63_fu_1721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_70_fu_1763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_65_fu_1733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_72_fu_1775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_73_fu_1781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_fu_1817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_74_fu_1787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_81_fu_1829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_75_fu_1793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_82_fu_1835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_76_fu_1799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_83_fu_1841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_77_fu_1805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_84_fu_1847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_78_fu_1811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_85_fu_1853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_80_fu_1823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_87_fu_1865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_88_fu_1871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_94_fu_1907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_89_fu_1877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_96_fu_1919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_90_fu_1883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_97_fu_1925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_91_fu_1889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_98_fu_1931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_92_fu_1895_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_99_fu_1937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_93_fu_1901_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_100_fu_1943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_95_fu_1913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_102_fu_1955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_103_fu_1961_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_109_fu_1997_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_104_fu_1967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_111_fu_2009_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_105_fu_1973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_112_fu_2015_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_106_fu_1979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_113_fu_2021_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_107_fu_1985_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_114_fu_2027_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_108_fu_1991_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_115_fu_2033_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_110_fu_2003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_117_fu_2045_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_118_fu_2051_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_124_fu_2087_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_119_fu_2057_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_126_fu_2099_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_120_fu_2063_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_127_fu_2105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_121_fu_2069_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_128_fu_2111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_122_fu_2075_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_129_fu_2117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_123_fu_2081_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_130_fu_2123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_125_fu_2093_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_2_fu_2150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_3_fu_2156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1483_1_fu_2186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_1_fu_2144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_6_fu_2174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_7_fu_2180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_4_fu_2162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_5_fu_2168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1483_3_fu_2204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1483_4_fu_2198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1483_5_fu_2210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_fu_2138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1483_2_fu_2216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1483_fu_2192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1483_6_fu_2222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_cast_fu_2485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_s_fu_2498_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_1315 : BOOLEAN;
    signal ap_condition_1324 : BOOLEAN;
    signal ap_condition_1332 : BOOLEAN;
    signal ap_condition_1339 : BOOLEAN;
    signal ap_condition_1345 : BOOLEAN;
    signal ap_condition_1350 : BOOLEAN;
    signal ap_condition_1354 : BOOLEAN;
    signal ap_condition_1357 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component TrellisBuilder_mux_42_6_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        din3 : IN STD_LOGIC_VECTOR (5 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component TrellisBuilder_mux_21_6_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component TrellisBuilder_mux_877_6_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        din65_WIDTH : INTEGER;
        din66_WIDTH : INTEGER;
        din67_WIDTH : INTEGER;
        din68_WIDTH : INTEGER;
        din69_WIDTH : INTEGER;
        din70_WIDTH : INTEGER;
        din71_WIDTH : INTEGER;
        din72_WIDTH : INTEGER;
        din73_WIDTH : INTEGER;
        din74_WIDTH : INTEGER;
        din75_WIDTH : INTEGER;
        din76_WIDTH : INTEGER;
        din77_WIDTH : INTEGER;
        din78_WIDTH : INTEGER;
        din79_WIDTH : INTEGER;
        din80_WIDTH : INTEGER;
        din81_WIDTH : INTEGER;
        din82_WIDTH : INTEGER;
        din83_WIDTH : INTEGER;
        din84_WIDTH : INTEGER;
        din85_WIDTH : INTEGER;
        din86_WIDTH : INTEGER;
        din87_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        din3 : IN STD_LOGIC_VECTOR (5 downto 0);
        din4 : IN STD_LOGIC_VECTOR (5 downto 0);
        din5 : IN STD_LOGIC_VECTOR (5 downto 0);
        din6 : IN STD_LOGIC_VECTOR (5 downto 0);
        din7 : IN STD_LOGIC_VECTOR (5 downto 0);
        din8 : IN STD_LOGIC_VECTOR (5 downto 0);
        din9 : IN STD_LOGIC_VECTOR (5 downto 0);
        din10 : IN STD_LOGIC_VECTOR (5 downto 0);
        din11 : IN STD_LOGIC_VECTOR (5 downto 0);
        din12 : IN STD_LOGIC_VECTOR (5 downto 0);
        din13 : IN STD_LOGIC_VECTOR (5 downto 0);
        din14 : IN STD_LOGIC_VECTOR (5 downto 0);
        din15 : IN STD_LOGIC_VECTOR (5 downto 0);
        din16 : IN STD_LOGIC_VECTOR (5 downto 0);
        din17 : IN STD_LOGIC_VECTOR (5 downto 0);
        din18 : IN STD_LOGIC_VECTOR (5 downto 0);
        din19 : IN STD_LOGIC_VECTOR (5 downto 0);
        din20 : IN STD_LOGIC_VECTOR (5 downto 0);
        din21 : IN STD_LOGIC_VECTOR (5 downto 0);
        din22 : IN STD_LOGIC_VECTOR (5 downto 0);
        din23 : IN STD_LOGIC_VECTOR (5 downto 0);
        din24 : IN STD_LOGIC_VECTOR (5 downto 0);
        din25 : IN STD_LOGIC_VECTOR (5 downto 0);
        din26 : IN STD_LOGIC_VECTOR (5 downto 0);
        din27 : IN STD_LOGIC_VECTOR (5 downto 0);
        din28 : IN STD_LOGIC_VECTOR (5 downto 0);
        din29 : IN STD_LOGIC_VECTOR (5 downto 0);
        din30 : IN STD_LOGIC_VECTOR (5 downto 0);
        din31 : IN STD_LOGIC_VECTOR (5 downto 0);
        din32 : IN STD_LOGIC_VECTOR (5 downto 0);
        din33 : IN STD_LOGIC_VECTOR (5 downto 0);
        din34 : IN STD_LOGIC_VECTOR (5 downto 0);
        din35 : IN STD_LOGIC_VECTOR (5 downto 0);
        din36 : IN STD_LOGIC_VECTOR (5 downto 0);
        din37 : IN STD_LOGIC_VECTOR (5 downto 0);
        din38 : IN STD_LOGIC_VECTOR (5 downto 0);
        din39 : IN STD_LOGIC_VECTOR (5 downto 0);
        din40 : IN STD_LOGIC_VECTOR (5 downto 0);
        din41 : IN STD_LOGIC_VECTOR (5 downto 0);
        din42 : IN STD_LOGIC_VECTOR (5 downto 0);
        din43 : IN STD_LOGIC_VECTOR (5 downto 0);
        din44 : IN STD_LOGIC_VECTOR (5 downto 0);
        din45 : IN STD_LOGIC_VECTOR (5 downto 0);
        din46 : IN STD_LOGIC_VECTOR (5 downto 0);
        din47 : IN STD_LOGIC_VECTOR (5 downto 0);
        din48 : IN STD_LOGIC_VECTOR (5 downto 0);
        din49 : IN STD_LOGIC_VECTOR (5 downto 0);
        din50 : IN STD_LOGIC_VECTOR (5 downto 0);
        din51 : IN STD_LOGIC_VECTOR (5 downto 0);
        din52 : IN STD_LOGIC_VECTOR (5 downto 0);
        din53 : IN STD_LOGIC_VECTOR (5 downto 0);
        din54 : IN STD_LOGIC_VECTOR (5 downto 0);
        din55 : IN STD_LOGIC_VECTOR (5 downto 0);
        din56 : IN STD_LOGIC_VECTOR (5 downto 0);
        din57 : IN STD_LOGIC_VECTOR (5 downto 0);
        din58 : IN STD_LOGIC_VECTOR (5 downto 0);
        din59 : IN STD_LOGIC_VECTOR (5 downto 0);
        din60 : IN STD_LOGIC_VECTOR (5 downto 0);
        din61 : IN STD_LOGIC_VECTOR (5 downto 0);
        din62 : IN STD_LOGIC_VECTOR (5 downto 0);
        din63 : IN STD_LOGIC_VECTOR (5 downto 0);
        din64 : IN STD_LOGIC_VECTOR (5 downto 0);
        din65 : IN STD_LOGIC_VECTOR (5 downto 0);
        din66 : IN STD_LOGIC_VECTOR (5 downto 0);
        din67 : IN STD_LOGIC_VECTOR (5 downto 0);
        din68 : IN STD_LOGIC_VECTOR (5 downto 0);
        din69 : IN STD_LOGIC_VECTOR (5 downto 0);
        din70 : IN STD_LOGIC_VECTOR (5 downto 0);
        din71 : IN STD_LOGIC_VECTOR (5 downto 0);
        din72 : IN STD_LOGIC_VECTOR (5 downto 0);
        din73 : IN STD_LOGIC_VECTOR (5 downto 0);
        din74 : IN STD_LOGIC_VECTOR (5 downto 0);
        din75 : IN STD_LOGIC_VECTOR (5 downto 0);
        din76 : IN STD_LOGIC_VECTOR (5 downto 0);
        din77 : IN STD_LOGIC_VECTOR (5 downto 0);
        din78 : IN STD_LOGIC_VECTOR (5 downto 0);
        din79 : IN STD_LOGIC_VECTOR (5 downto 0);
        din80 : IN STD_LOGIC_VECTOR (5 downto 0);
        din81 : IN STD_LOGIC_VECTOR (5 downto 0);
        din82 : IN STD_LOGIC_VECTOR (5 downto 0);
        din83 : IN STD_LOGIC_VECTOR (5 downto 0);
        din84 : IN STD_LOGIC_VECTOR (5 downto 0);
        din85 : IN STD_LOGIC_VECTOR (5 downto 0);
        din86 : IN STD_LOGIC_VECTOR (5 downto 0);
        din87 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component TrellisBuilder_mux_97_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component TrellisBuilder_mux_83_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component TrellisBuilder_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_42_6_1_1_U98 : component TrellisBuilder_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => prevState_V_0_10_reload,
        din1 => prevState_V_1_10_reload,
        din2 => prevState_V_2_4_reload,
        din3 => prevState_V_3_4_reload,
        din4 => trunc_ln1065_fu_1069_p1,
        dout => tmp_7_fu_1073_p6);

    mux_42_6_1_1_U99 : component TrellisBuilder_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => prevState_V_0_4_reload,
        din1 => prevState_V_1_4_reload,
        din2 => prevState_V_2_10_reload,
        din3 => prevState_V_3_10_reload,
        din4 => trunc_ln1065_fu_1069_p1,
        dout => tmp_8_fu_1087_p6);

    mux_21_6_1_1_U100 : component TrellisBuilder_mux_21_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 1,
        dout_WIDTH => 6)
    port map (
        din0 => tmp_7_fu_1073_p6,
        din1 => tmp_8_fu_1087_p6,
        din2 => tmp_fu_1101_p3,
        dout => tmp_fu_1101_p4);

    mux_42_6_1_1_U101 : component TrellisBuilder_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => prevState_V_0_9_reload,
        din1 => prevState_V_1_9_reload,
        din2 => prevState_V_2_3_reload,
        din3 => prevState_V_3_3_reload,
        din4 => trunc_ln1065_fu_1069_p1,
        dout => tmp_9_fu_1111_p6);

    mux_42_6_1_1_U102 : component TrellisBuilder_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => prevState_V_0_3_reload,
        din1 => prevState_V_1_3_reload,
        din2 => prevState_V_2_9_reload,
        din3 => prevState_V_3_9_reload,
        din4 => trunc_ln1065_fu_1069_p1,
        dout => tmp_s_fu_1125_p6);

    mux_21_6_1_1_U103 : component TrellisBuilder_mux_21_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 1,
        dout_WIDTH => 6)
    port map (
        din0 => tmp_9_fu_1111_p6,
        din1 => tmp_s_fu_1125_p6,
        din2 => tmp_1_fu_1139_p3,
        dout => tmp_1_fu_1139_p4);

    mux_42_6_1_1_U104 : component TrellisBuilder_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => prevState_V_0_8_reload,
        din1 => prevState_V_1_8_reload,
        din2 => prevState_V_2_2_reload,
        din3 => prevState_V_3_2_reload,
        din4 => trunc_ln1065_fu_1069_p1,
        dout => tmp_10_fu_1149_p6);

    mux_42_6_1_1_U105 : component TrellisBuilder_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => prevState_V_0_2_reload,
        din1 => prevState_V_1_2_reload,
        din2 => prevState_V_2_8_reload,
        din3 => prevState_V_3_8_reload,
        din4 => trunc_ln1065_fu_1069_p1,
        dout => tmp_11_fu_1163_p6);

    mux_21_6_1_1_U106 : component TrellisBuilder_mux_21_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 1,
        dout_WIDTH => 6)
    port map (
        din0 => tmp_10_fu_1149_p6,
        din1 => tmp_11_fu_1163_p6,
        din2 => tmp_2_fu_1177_p3,
        dout => tmp_2_fu_1177_p4);

    mux_42_6_1_1_U107 : component TrellisBuilder_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => prevState_V_0_7_reload,
        din1 => prevState_V_1_7_reload,
        din2 => prevState_V_2_1_reload,
        din3 => prevState_V_3_1_reload,
        din4 => trunc_ln1065_fu_1069_p1,
        dout => tmp_12_fu_1187_p6);

    mux_42_6_1_1_U108 : component TrellisBuilder_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => prevState_V_0_1_reload,
        din1 => prevState_V_1_1_reload,
        din2 => prevState_V_2_7_reload,
        din3 => prevState_V_3_7_reload,
        din4 => trunc_ln1065_fu_1069_p1,
        dout => tmp_13_fu_1201_p6);

    mux_21_6_1_1_U109 : component TrellisBuilder_mux_21_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 1,
        dout_WIDTH => 6)
    port map (
        din0 => tmp_12_fu_1187_p6,
        din1 => tmp_13_fu_1201_p6,
        din2 => tmp_3_fu_1215_p3,
        dout => tmp_3_fu_1215_p4);

    mux_42_6_1_1_U110 : component TrellisBuilder_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => prevState_V_0_6_reload,
        din1 => prevState_V_1_6_reload,
        din2 => prevState_V_2_reload,
        din3 => prevState_V_3_reload,
        din4 => trunc_ln1065_fu_1069_p1,
        dout => tmp_14_fu_1225_p6);

    mux_42_6_1_1_U111 : component TrellisBuilder_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => prevState_V_0_reload,
        din1 => prevState_V_1_reload,
        din2 => prevState_V_2_6_reload,
        din3 => prevState_V_3_6_reload,
        din4 => trunc_ln1065_fu_1069_p1,
        dout => tmp_15_fu_1239_p6);

    mux_21_6_1_1_U112 : component TrellisBuilder_mux_21_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 1,
        dout_WIDTH => 6)
    port map (
        din0 => tmp_14_fu_1225_p6,
        din1 => tmp_15_fu_1239_p6,
        din2 => tmp_4_fu_1253_p3,
        dout => tmp_4_fu_1253_p4);

    mux_42_6_1_1_U113 : component TrellisBuilder_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => prevState_V_0_11_reload,
        din1 => prevState_V_1_11_reload,
        din2 => prevState_V_2_5_reload,
        din3 => prevState_V_3_5_reload,
        din4 => trunc_ln1065_fu_1069_p1,
        dout => tmp_16_fu_1263_p6);

    mux_42_6_1_1_U114 : component TrellisBuilder_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => prevState_V_0_5_reload,
        din1 => prevState_V_1_5_reload,
        din2 => prevState_V_2_11_reload,
        din3 => prevState_V_3_11_reload,
        din4 => trunc_ln1065_fu_1069_p1,
        dout => tmp_17_fu_1277_p6);

    mux_21_6_1_1_U115 : component TrellisBuilder_mux_21_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 1,
        dout_WIDTH => 6)
    port map (
        din0 => tmp_16_fu_1263_p6,
        din1 => tmp_17_fu_1277_p6,
        din2 => tmp_5_fu_1291_p3,
        dout => tmp_5_fu_1291_p4);

    mux_42_6_1_1_U116 : component TrellisBuilder_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_0,
        din1 => ap_const_lv6_0,
        din2 => ap_const_lv6_0,
        din3 => ap_const_lv6_0,
        din4 => trunc_ln1065_fu_1069_p1,
        dout => tmp_18_fu_1301_p6);

    mux_21_6_1_1_U117 : component TrellisBuilder_mux_21_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 1,
        dout_WIDTH => 6)
    port map (
        din0 => tmp_18_fu_1301_p6,
        din1 => tmp_18_fu_1301_p6,
        din2 => tmp_6_fu_1315_p3,
        dout => tmp_6_fu_1315_p4);

    mux_877_6_1_1_U118 : component TrellisBuilder_mux_877_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 6,
        din5_WIDTH => 6,
        din6_WIDTH => 6,
        din7_WIDTH => 6,
        din8_WIDTH => 6,
        din9_WIDTH => 6,
        din10_WIDTH => 6,
        din11_WIDTH => 6,
        din12_WIDTH => 6,
        din13_WIDTH => 6,
        din14_WIDTH => 6,
        din15_WIDTH => 6,
        din16_WIDTH => 6,
        din17_WIDTH => 6,
        din18_WIDTH => 6,
        din19_WIDTH => 6,
        din20_WIDTH => 6,
        din21_WIDTH => 6,
        din22_WIDTH => 6,
        din23_WIDTH => 6,
        din24_WIDTH => 6,
        din25_WIDTH => 6,
        din26_WIDTH => 6,
        din27_WIDTH => 6,
        din28_WIDTH => 6,
        din29_WIDTH => 6,
        din30_WIDTH => 6,
        din31_WIDTH => 6,
        din32_WIDTH => 6,
        din33_WIDTH => 6,
        din34_WIDTH => 6,
        din35_WIDTH => 6,
        din36_WIDTH => 6,
        din37_WIDTH => 6,
        din38_WIDTH => 6,
        din39_WIDTH => 6,
        din40_WIDTH => 6,
        din41_WIDTH => 6,
        din42_WIDTH => 6,
        din43_WIDTH => 6,
        din44_WIDTH => 6,
        din45_WIDTH => 6,
        din46_WIDTH => 6,
        din47_WIDTH => 6,
        din48_WIDTH => 6,
        din49_WIDTH => 6,
        din50_WIDTH => 6,
        din51_WIDTH => 6,
        din52_WIDTH => 6,
        din53_WIDTH => 6,
        din54_WIDTH => 6,
        din55_WIDTH => 6,
        din56_WIDTH => 6,
        din57_WIDTH => 6,
        din58_WIDTH => 6,
        din59_WIDTH => 6,
        din60_WIDTH => 6,
        din61_WIDTH => 6,
        din62_WIDTH => 6,
        din63_WIDTH => 6,
        din64_WIDTH => 6,
        din65_WIDTH => 6,
        din66_WIDTH => 6,
        din67_WIDTH => 6,
        din68_WIDTH => 6,
        din69_WIDTH => 6,
        din70_WIDTH => 6,
        din71_WIDTH => 6,
        din72_WIDTH => 6,
        din73_WIDTH => 6,
        din74_WIDTH => 6,
        din75_WIDTH => 6,
        din76_WIDTH => 6,
        din77_WIDTH => 6,
        din78_WIDTH => 6,
        din79_WIDTH => 6,
        din80_WIDTH => 6,
        din81_WIDTH => 6,
        din82_WIDTH => 6,
        din83_WIDTH => 6,
        din84_WIDTH => 6,
        din85_WIDTH => 6,
        din86_WIDTH => 6,
        din87_WIDTH => 7,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_0,
        din1 => ap_const_lv6_0,
        din2 => ap_const_lv6_0,
        din3 => tmp_fu_1101_p4,
        din4 => tmp_1_fu_1139_p4,
        din5 => tmp_2_fu_1177_p4,
        din6 => tmp_3_fu_1215_p4,
        din7 => tmp_4_fu_1253_p4,
        din8 => tmp_5_fu_1291_p4,
        din9 => tmp_6_fu_1315_p4,
        din10 => tmp_6_fu_1315_p4,
        din11 => tmp_6_fu_1315_p4,
        din12 => tmp_6_fu_1315_p4,
        din13 => tmp_6_fu_1315_p4,
        din14 => tmp_6_fu_1315_p4,
        din15 => tmp_6_fu_1315_p4,
        din16 => tmp_6_fu_1315_p4,
        din17 => tmp_6_fu_1315_p4,
        din18 => tmp_6_fu_1315_p4,
        din19 => tmp_6_fu_1315_p4,
        din20 => tmp_6_fu_1315_p4,
        din21 => tmp_6_fu_1315_p4,
        din22 => tmp_6_fu_1315_p4,
        din23 => tmp_6_fu_1315_p4,
        din24 => tmp_6_fu_1315_p4,
        din25 => tmp_6_fu_1315_p4,
        din26 => tmp_6_fu_1315_p4,
        din27 => tmp_6_fu_1315_p4,
        din28 => tmp_6_fu_1315_p4,
        din29 => tmp_6_fu_1315_p4,
        din30 => tmp_6_fu_1315_p4,
        din31 => tmp_6_fu_1315_p4,
        din32 => tmp_6_fu_1315_p4,
        din33 => tmp_6_fu_1315_p4,
        din34 => tmp_6_fu_1315_p4,
        din35 => tmp_6_fu_1315_p4,
        din36 => tmp_6_fu_1315_p4,
        din37 => tmp_6_fu_1315_p4,
        din38 => tmp_6_fu_1315_p4,
        din39 => tmp_6_fu_1315_p4,
        din40 => tmp_6_fu_1315_p4,
        din41 => tmp_6_fu_1315_p4,
        din42 => tmp_6_fu_1315_p4,
        din43 => tmp_6_fu_1315_p4,
        din44 => tmp_6_fu_1315_p4,
        din45 => tmp_6_fu_1315_p4,
        din46 => tmp_6_fu_1315_p4,
        din47 => tmp_6_fu_1315_p4,
        din48 => tmp_6_fu_1315_p4,
        din49 => tmp_6_fu_1315_p4,
        din50 => tmp_6_fu_1315_p4,
        din51 => tmp_6_fu_1315_p4,
        din52 => tmp_6_fu_1315_p4,
        din53 => tmp_6_fu_1315_p4,
        din54 => tmp_6_fu_1315_p4,
        din55 => tmp_6_fu_1315_p4,
        din56 => tmp_6_fu_1315_p4,
        din57 => tmp_6_fu_1315_p4,
        din58 => tmp_6_fu_1315_p4,
        din59 => tmp_6_fu_1315_p4,
        din60 => tmp_6_fu_1315_p4,
        din61 => tmp_6_fu_1315_p4,
        din62 => tmp_6_fu_1315_p4,
        din63 => tmp_6_fu_1315_p4,
        din64 => tmp_6_fu_1315_p4,
        din65 => tmp_6_fu_1315_p4,
        din66 => tmp_6_fu_1315_p4,
        din67 => tmp_6_fu_1315_p4,
        din68 => tmp_6_fu_1315_p4,
        din69 => tmp_6_fu_1315_p4,
        din70 => tmp_6_fu_1315_p4,
        din71 => tmp_6_fu_1315_p4,
        din72 => tmp_6_fu_1315_p4,
        din73 => tmp_6_fu_1315_p4,
        din74 => tmp_6_fu_1315_p4,
        din75 => tmp_6_fu_1315_p4,
        din76 => tmp_6_fu_1315_p4,
        din77 => tmp_6_fu_1315_p4,
        din78 => tmp_6_fu_1315_p4,
        din79 => tmp_6_fu_1315_p4,
        din80 => tmp_6_fu_1315_p4,
        din81 => tmp_6_fu_1315_p4,
        din82 => tmp_6_fu_1315_p4,
        din83 => tmp_6_fu_1315_p4,
        din84 => tmp_6_fu_1315_p4,
        din85 => tmp_6_fu_1315_p4,
        din86 => tmp_6_fu_1315_p4,
        din87 => sub_ln1455_fu_1055_p2,
        dout => tmp_19_fu_1325_p89);

    mux_97_1_1_1_U119 : component TrellisBuilder_mux_97_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 7,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => choice_reload,
        din4 => choice_1_reload,
        din5 => choice_2_reload,
        din6 => choice_3_reload,
        din7 => choice_4_reload,
        din8 => choice_5_reload,
        din9 => sub_ln1455_fu_1055_p2,
        dout => tmp_20_fu_2276_p11);

    mux_97_1_1_1_U120 : component TrellisBuilder_mux_97_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 7,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => choice_47_reload,
        din4 => choice_46_reload,
        din5 => choice_45_reload,
        din6 => choice_44_reload,
        din7 => choice_43_reload,
        din8 => choice_42_reload,
        din9 => sub_ln1455_fu_1055_p2,
        dout => tmp_21_fu_2300_p11);

    mux_97_1_1_1_U121 : component TrellisBuilder_mux_97_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 7,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => choice_41_reload,
        din4 => choice_40_reload,
        din5 => choice_39_reload,
        din6 => choice_38_reload,
        din7 => choice_37_reload,
        din8 => choice_36_reload,
        din9 => sub_ln1455_fu_1055_p2,
        dout => tmp_22_fu_2324_p11);

    mux_97_1_1_1_U122 : component TrellisBuilder_mux_97_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 7,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => choice_35_reload,
        din4 => choice_34_reload,
        din5 => choice_33_reload,
        din6 => choice_32_reload,
        din7 => choice_31_reload,
        din8 => choice_30_reload,
        din9 => sub_ln1455_fu_1055_p2,
        dout => tmp_23_fu_2348_p11);

    mux_97_1_1_1_U123 : component TrellisBuilder_mux_97_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 7,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => choice_29_reload,
        din4 => choice_28_reload,
        din5 => choice_27_reload,
        din6 => choice_26_reload,
        din7 => choice_25_reload,
        din8 => choice_24_reload,
        din9 => sub_ln1455_fu_1055_p2,
        dout => tmp_24_fu_2372_p11);

    mux_97_1_1_1_U124 : component TrellisBuilder_mux_97_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 7,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => choice_23_reload,
        din4 => choice_22_reload,
        din5 => choice_21_reload,
        din6 => choice_20_reload,
        din7 => choice_19_reload,
        din8 => choice_18_reload,
        din9 => sub_ln1455_fu_1055_p2,
        dout => tmp_25_fu_2396_p11);

    mux_97_1_1_1_U125 : component TrellisBuilder_mux_97_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 7,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => choice_17_reload,
        din4 => choice_16_reload,
        din5 => choice_15_reload,
        din6 => choice_14_reload,
        din7 => choice_13_reload,
        din8 => choice_12_reload,
        din9 => sub_ln1455_fu_1055_p2,
        dout => tmp_26_fu_2420_p11);

    mux_97_1_1_1_U126 : component TrellisBuilder_mux_97_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 7,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => choice_11_reload,
        din4 => choice_10_reload,
        din5 => choice_9_reload,
        din6 => choice_8_reload,
        din7 => choice_7_reload,
        din8 => choice_6_reload,
        din9 => sub_ln1455_fu_1055_p2,
        dout => tmp_27_fu_2444_p11);

    mux_83_1_1_1_U127 : component TrellisBuilder_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_20_reg_2610,
        din1 => tmp_21_reg_2615,
        din2 => tmp_22_reg_2620,
        din3 => tmp_23_reg_2625,
        din4 => tmp_24_reg_2630,
        din5 => tmp_25_reg_2635,
        din6 => tmp_26_reg_2640,
        din7 => tmp_27_reg_2645,
        din8 => Bucket_V_1_fu_402,
        dout => p_Repl2_s_fu_2498_p10);

    flow_control_loop_pipe_sequential_init_U : component TrellisBuilder_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    Bucket_V_1_fu_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_const_boolean_1 = ap_condition_1357)) then 
                    Bucket_V_1_fu_402 <= ap_const_lv3_0;
                elsif ((ap_const_boolean_1 = ap_condition_1354)) then 
                    Bucket_V_1_fu_402 <= ap_const_lv3_1;
                elsif ((ap_const_boolean_1 = ap_condition_1350)) then 
                    Bucket_V_1_fu_402 <= ap_const_lv3_2;
                elsif ((ap_const_boolean_1 = ap_condition_1345)) then 
                    Bucket_V_1_fu_402 <= ap_const_lv3_3;
                elsif ((ap_const_boolean_1 = ap_condition_1339)) then 
                    Bucket_V_1_fu_402 <= ap_const_lv3_4;
                elsif ((ap_const_boolean_1 = ap_condition_1332)) then 
                    Bucket_V_1_fu_402 <= ap_const_lv3_5;
                elsif ((ap_const_boolean_1 = ap_condition_1324)) then 
                    Bucket_V_1_fu_402 <= ap_const_lv3_6;
                elsif ((ap_const_boolean_1 = ap_condition_1315)) then 
                    Bucket_V_1_fu_402 <= select_ln1483_fu_2228_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    Bucket_V_1_fu_402 <= Bucket_V;
                end if;
            end if; 
        end if;
    end process;

    count_fu_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1452_fu_1040_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    count_fu_418 <= add_ln1491_fu_1046_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    count_fu_418 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    k_fu_410_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_410 <= ap_const_lv8_53;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    k_fu_410 <= k_1_fu_2522_p2;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_Val2_s_fu_414 <= p_Result_s;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    p_Val2_s_fu_414 <= p_Result_1_fu_2512_p4;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1452_fu_1040_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                prevState2_V_fu_406 <= trunc_ln1452_fu_2468_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1452_fu_1040_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_20_reg_2610 <= tmp_20_fu_2276_p11;
                tmp_21_reg_2615 <= tmp_21_fu_2300_p11;
                tmp_22_reg_2620 <= tmp_22_fu_2324_p11;
                tmp_23_reg_2625 <= tmp_23_fu_2348_p11;
                tmp_24_reg_2630 <= tmp_24_fu_2372_p11;
                tmp_25_reg_2635 <= tmp_25_fu_2396_p11;
                tmp_26_reg_2640 <= tmp_26_fu_2420_p11;
                tmp_27_reg_2645 <= tmp_27_fu_2444_p11;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1491_fu_1046_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_count_1) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1315_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1452_fu_1040_p2, empty_41_fu_1589_p2, empty_56_fu_1679_p2, empty_71_fu_1769_p2, empty_86_fu_1859_p2, empty_101_fu_1949_p2, empty_116_fu_2039_p2, empty_131_fu_2129_p2)
    begin
                ap_condition_1315 <= ((icmp_ln1452_fu_1040_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (empty_131_fu_2129_p2 = ap_const_lv1_0) and (empty_116_fu_2039_p2 = ap_const_lv1_0) and (empty_101_fu_1949_p2 = ap_const_lv1_0) and (empty_86_fu_1859_p2 = ap_const_lv1_0) and (empty_71_fu_1769_p2 = ap_const_lv1_0) and (empty_56_fu_1679_p2 = ap_const_lv1_0) and (empty_41_fu_1589_p2 = ap_const_lv1_0));
    end process;


    ap_condition_1324_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1452_fu_1040_p2, empty_41_fu_1589_p2, empty_56_fu_1679_p2, empty_71_fu_1769_p2, empty_86_fu_1859_p2, empty_101_fu_1949_p2, empty_116_fu_2039_p2, empty_131_fu_2129_p2)
    begin
                ap_condition_1324 <= ((icmp_ln1452_fu_1040_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (empty_131_fu_2129_p2 = ap_const_lv1_1) and (empty_116_fu_2039_p2 = ap_const_lv1_0) and (empty_101_fu_1949_p2 = ap_const_lv1_0) and (empty_86_fu_1859_p2 = ap_const_lv1_0) and (empty_71_fu_1769_p2 = ap_const_lv1_0) and (empty_56_fu_1679_p2 = ap_const_lv1_0) and (empty_41_fu_1589_p2 = ap_const_lv1_0));
    end process;


    ap_condition_1332_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1452_fu_1040_p2, empty_41_fu_1589_p2, empty_56_fu_1679_p2, empty_71_fu_1769_p2, empty_86_fu_1859_p2, empty_101_fu_1949_p2, empty_116_fu_2039_p2)
    begin
                ap_condition_1332 <= ((icmp_ln1452_fu_1040_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (empty_116_fu_2039_p2 = ap_const_lv1_1) and (empty_101_fu_1949_p2 = ap_const_lv1_0) and (empty_86_fu_1859_p2 = ap_const_lv1_0) and (empty_71_fu_1769_p2 = ap_const_lv1_0) and (empty_56_fu_1679_p2 = ap_const_lv1_0) and (empty_41_fu_1589_p2 = ap_const_lv1_0));
    end process;


    ap_condition_1339_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1452_fu_1040_p2, empty_41_fu_1589_p2, empty_56_fu_1679_p2, empty_71_fu_1769_p2, empty_86_fu_1859_p2, empty_101_fu_1949_p2)
    begin
                ap_condition_1339 <= ((icmp_ln1452_fu_1040_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (empty_101_fu_1949_p2 = ap_const_lv1_1) and (empty_86_fu_1859_p2 = ap_const_lv1_0) and (empty_71_fu_1769_p2 = ap_const_lv1_0) and (empty_56_fu_1679_p2 = ap_const_lv1_0) and (empty_41_fu_1589_p2 = ap_const_lv1_0));
    end process;


    ap_condition_1345_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1452_fu_1040_p2, empty_41_fu_1589_p2, empty_56_fu_1679_p2, empty_71_fu_1769_p2, empty_86_fu_1859_p2)
    begin
                ap_condition_1345 <= ((icmp_ln1452_fu_1040_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (empty_86_fu_1859_p2 = ap_const_lv1_1) and (empty_71_fu_1769_p2 = ap_const_lv1_0) and (empty_56_fu_1679_p2 = ap_const_lv1_0) and (empty_41_fu_1589_p2 = ap_const_lv1_0));
    end process;


    ap_condition_1350_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1452_fu_1040_p2, empty_41_fu_1589_p2, empty_56_fu_1679_p2, empty_71_fu_1769_p2)
    begin
                ap_condition_1350 <= ((icmp_ln1452_fu_1040_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (empty_71_fu_1769_p2 = ap_const_lv1_1) and (empty_56_fu_1679_p2 = ap_const_lv1_0) and (empty_41_fu_1589_p2 = ap_const_lv1_0));
    end process;


    ap_condition_1354_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1452_fu_1040_p2, empty_41_fu_1589_p2, empty_56_fu_1679_p2)
    begin
                ap_condition_1354 <= ((icmp_ln1452_fu_1040_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (empty_56_fu_1679_p2 = ap_const_lv1_1) and (empty_41_fu_1589_p2 = ap_const_lv1_0));
    end process;


    ap_condition_1357_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1452_fu_1040_p2, empty_41_fu_1589_p2)
    begin
                ap_condition_1357 <= ((icmp_ln1452_fu_1040_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (empty_41_fu_1589_p2 = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1452_fu_1040_p2)
    begin
        if (((icmp_ln1452_fu_1040_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_Bucket_V_1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, Bucket_V, Bucket_V_1_fu_402, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_Bucket_V_1_load <= Bucket_V;
        else 
            ap_sig_allocacmp_Bucket_V_1_load <= Bucket_V_1_fu_402;
        end if; 
    end process;


    ap_sig_allocacmp_count_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, count_fu_418)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_count_1 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_count_1 <= count_fu_418;
        end if; 
    end process;

    empty_100_fu_1943_p2 <= (empty_99_fu_1937_p2 or empty_93_fu_1901_p2);
    empty_101_fu_1949_p2 <= (empty_95_fu_1913_p2 or empty_100_fu_1943_p2);
    empty_102_fu_1955_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_3A) else "0";
    empty_103_fu_1961_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_37) else "0";
    empty_104_fu_1967_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_2B) else "0";
    empty_105_fu_1973_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_26) else "0";
    empty_106_fu_1979_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_19) else "0";
    empty_107_fu_1985_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_14) else "0";
    empty_108_fu_1991_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_8) else "0";
    empty_109_fu_1997_p2 <= (empty_103_fu_1961_p2 or empty_102_fu_1955_p2);
    empty_110_fu_2003_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_5) else "0";
    empty_111_fu_2009_p2 <= (empty_109_fu_1997_p2 or empty_104_fu_1967_p2);
    empty_112_fu_2015_p2 <= (empty_111_fu_2009_p2 or empty_105_fu_1973_p2);
    empty_113_fu_2021_p2 <= (empty_112_fu_2015_p2 or empty_106_fu_1979_p2);
    empty_114_fu_2027_p2 <= (empty_113_fu_2021_p2 or empty_107_fu_1985_p2);
    empty_115_fu_2033_p2 <= (empty_114_fu_2027_p2 or empty_108_fu_1991_p2);
    empty_116_fu_2039_p2 <= (empty_115_fu_2033_p2 or empty_110_fu_2003_p2);
    empty_117_fu_2045_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_39) else "0";
    empty_118_fu_2051_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_34) else "0";
    empty_119_fu_2057_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_28) else "0";
    empty_120_fu_2063_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_25) else "0";
    empty_121_fu_2069_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_1A) else "0";
    empty_122_fu_2075_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_17) else "0";
    empty_123_fu_2081_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_B) else "0";
    empty_124_fu_2087_p2 <= (empty_118_fu_2051_p2 or empty_117_fu_2045_p2);
    empty_125_fu_2093_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_6) else "0";
    empty_126_fu_2099_p2 <= (empty_124_fu_2087_p2 or empty_119_fu_2057_p2);
    empty_127_fu_2105_p2 <= (empty_126_fu_2099_p2 or empty_120_fu_2063_p2);
    empty_128_fu_2111_p2 <= (empty_127_fu_2105_p2 or empty_121_fu_2069_p2);
    empty_129_fu_2117_p2 <= (empty_128_fu_2111_p2 or empty_122_fu_2075_p2);
    empty_130_fu_2123_p2 <= (empty_129_fu_2117_p2 or empty_123_fu_2081_p2);
    empty_131_fu_2129_p2 <= (empty_130_fu_2123_p2 or empty_125_fu_2093_p2);
    empty_27_fu_1505_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_3F) else "0";
    empty_28_fu_1511_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_32) else "0";
    empty_29_fu_1517_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_2E) else "0";
    empty_30_fu_1523_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_23) else "0";
    empty_31_fu_1529_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_1C) else "0";
    empty_32_fu_1535_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_11) else "0";
    empty_33_fu_1541_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_D) else "0";
    empty_34_fu_1547_p2 <= (empty_28_fu_1511_p2 or empty_27_fu_1505_p2);
    empty_35_fu_1553_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_0) else "0";
    empty_36_fu_1559_p2 <= (empty_34_fu_1547_p2 or empty_29_fu_1517_p2);
    empty_37_fu_1565_p2 <= (empty_36_fu_1559_p2 or empty_30_fu_1523_p2);
    empty_38_fu_1571_p2 <= (empty_37_fu_1565_p2 or empty_31_fu_1529_p2);
    empty_39_fu_1577_p2 <= (empty_38_fu_1571_p2 or empty_32_fu_1535_p2);
    empty_40_fu_1583_p2 <= (empty_39_fu_1577_p2 or empty_33_fu_1541_p2);
    empty_41_fu_1589_p2 <= (empty_40_fu_1583_p2 or empty_35_fu_1553_p2);
    empty_42_fu_1595_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_3E) else "0";
    empty_43_fu_1601_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_33) else "0";
    empty_44_fu_1607_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_2F) else "0";
    empty_45_fu_1613_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_22) else "0";
    empty_46_fu_1619_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_1D) else "0";
    empty_47_fu_1625_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_10) else "0";
    empty_48_fu_1631_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_C) else "0";
    empty_49_fu_1637_p2 <= (empty_43_fu_1601_p2 or empty_42_fu_1595_p2);
    empty_50_fu_1643_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_1) else "0";
    empty_51_fu_1649_p2 <= (empty_49_fu_1637_p2 or empty_44_fu_1607_p2);
    empty_52_fu_1655_p2 <= (empty_51_fu_1649_p2 or empty_45_fu_1613_p2);
    empty_53_fu_1661_p2 <= (empty_52_fu_1655_p2 or empty_46_fu_1619_p2);
    empty_54_fu_1667_p2 <= (empty_53_fu_1661_p2 or empty_47_fu_1625_p2);
    empty_55_fu_1673_p2 <= (empty_54_fu_1667_p2 or empty_48_fu_1631_p2);
    empty_56_fu_1679_p2 <= (empty_55_fu_1673_p2 or empty_50_fu_1643_p2);
    empty_57_fu_1685_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_3D) else "0";
    empty_58_fu_1691_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_30) else "0";
    empty_59_fu_1697_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_2C) else "0";
    empty_60_fu_1703_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_21) else "0";
    empty_61_fu_1709_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_1E) else "0";
    empty_62_fu_1715_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_13) else "0";
    empty_63_fu_1721_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_F) else "0";
    empty_64_fu_1727_p2 <= (empty_58_fu_1691_p2 or empty_57_fu_1685_p2);
    empty_65_fu_1733_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_2) else "0";
    empty_66_fu_1739_p2 <= (empty_64_fu_1727_p2 or empty_59_fu_1697_p2);
    empty_67_fu_1745_p2 <= (empty_66_fu_1739_p2 or empty_60_fu_1703_p2);
    empty_68_fu_1751_p2 <= (empty_67_fu_1745_p2 or empty_61_fu_1709_p2);
    empty_69_fu_1757_p2 <= (empty_68_fu_1751_p2 or empty_62_fu_1715_p2);
    empty_70_fu_1763_p2 <= (empty_69_fu_1757_p2 or empty_63_fu_1721_p2);
    empty_71_fu_1769_p2 <= (empty_70_fu_1763_p2 or empty_65_fu_1733_p2);
    empty_72_fu_1775_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_3C) else "0";
    empty_73_fu_1781_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_31) else "0";
    empty_74_fu_1787_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_2D) else "0";
    empty_75_fu_1793_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_20) else "0";
    empty_76_fu_1799_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_1F) else "0";
    empty_77_fu_1805_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_12) else "0";
    empty_78_fu_1811_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_E) else "0";
    empty_79_fu_1817_p2 <= (empty_73_fu_1781_p2 or empty_72_fu_1775_p2);
    empty_80_fu_1823_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_3) else "0";
    empty_81_fu_1829_p2 <= (empty_79_fu_1817_p2 or empty_74_fu_1787_p2);
    empty_82_fu_1835_p2 <= (empty_81_fu_1829_p2 or empty_75_fu_1793_p2);
    empty_83_fu_1841_p2 <= (empty_82_fu_1835_p2 or empty_76_fu_1799_p2);
    empty_84_fu_1847_p2 <= (empty_83_fu_1841_p2 or empty_77_fu_1805_p2);
    empty_85_fu_1853_p2 <= (empty_84_fu_1847_p2 or empty_78_fu_1811_p2);
    empty_86_fu_1859_p2 <= (empty_85_fu_1853_p2 or empty_80_fu_1823_p2);
    empty_87_fu_1865_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_3B) else "0";
    empty_88_fu_1871_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_36) else "0";
    empty_89_fu_1877_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_2A) else "0";
    empty_90_fu_1883_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_27) else "0";
    empty_91_fu_1889_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_18) else "0";
    empty_92_fu_1895_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_15) else "0";
    empty_93_fu_1901_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_9) else "0";
    empty_94_fu_1907_p2 <= (empty_88_fu_1871_p2 or empty_87_fu_1865_p2);
    empty_95_fu_1913_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_4) else "0";
    empty_96_fu_1919_p2 <= (empty_94_fu_1907_p2 or empty_89_fu_1877_p2);
    empty_97_fu_1925_p2 <= (empty_96_fu_1919_p2 or empty_90_fu_1883_p2);
    empty_98_fu_1931_p2 <= (empty_97_fu_1925_p2 or empty_91_fu_1889_p2);
    empty_99_fu_1937_p2 <= (empty_98_fu_1931_p2 or empty_92_fu_1895_p2);
    icmp_ln1065_1_fu_2144_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_A) else "0";
    icmp_ln1065_2_fu_2150_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_16) else "0";
    icmp_ln1065_3_fu_2156_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_1B) else "0";
    icmp_ln1065_4_fu_2162_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_24) else "0";
    icmp_ln1065_5_fu_2168_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_29) else "0";
    icmp_ln1065_6_fu_2174_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_35) else "0";
    icmp_ln1065_7_fu_2180_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_38) else "0";
    icmp_ln1065_fu_2138_p2 <= "1" when (tmp_19_fu_1325_p89 = ap_const_lv6_7) else "0";
    icmp_ln1452_fu_1040_p2 <= "1" when (ap_sig_allocacmp_count_1 = ap_const_lv7_54) else "0";
    k_1_fu_2522_p2 <= std_logic_vector(unsigned(k_fu_410) + unsigned(ap_const_lv8_FF));
    k_cast_fu_2485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_fu_410),32));
    or_ln1483_1_fu_2186_p2 <= (icmp_ln1065_3_fu_2156_p2 or icmp_ln1065_2_fu_2150_p2);
    or_ln1483_2_fu_2216_p2 <= (or_ln1483_5_fu_2210_p2 or icmp_ln1065_fu_2138_p2);
    or_ln1483_3_fu_2204_p2 <= (icmp_ln1065_5_fu_2168_p2 or icmp_ln1065_4_fu_2162_p2);
    or_ln1483_4_fu_2198_p2 <= (icmp_ln1065_7_fu_2180_p2 or icmp_ln1065_6_fu_2174_p2);
    or_ln1483_5_fu_2210_p2 <= (or_ln1483_4_fu_2198_p2 or or_ln1483_3_fu_2204_p2);
    or_ln1483_6_fu_2222_p2 <= (or_ln1483_fu_2192_p2 or or_ln1483_2_fu_2216_p2);
    or_ln1483_fu_2192_p2 <= (or_ln1483_1_fu_2186_p2 or icmp_ln1065_1_fu_2144_p2);
    
    p_Result_1_fu_2512_p4_proc : process(p_Val2_s_fu_414, k_cast_fu_2485_p1, p_Repl2_s_fu_2498_p10)
    begin
        p_Result_1_fu_2512_p4 <= p_Val2_s_fu_414;
        if to_integer(unsigned(k_cast_fu_2485_p1)) >= p_Val2_s_fu_414'low and to_integer(unsigned(k_cast_fu_2485_p1)) <= p_Val2_s_fu_414'high then
            p_Result_1_fu_2512_p4(to_integer(unsigned(k_cast_fu_2485_p1))) <= p_Repl2_s_fu_2498_p10(0);
        end if;
    end process;

    p_Val2_1_out <= p_Val2_s_fu_414;

    p_Val2_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1452_fu_1040_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1452_fu_1040_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_Val2_1_out_ap_vld <= ap_const_logic_1;
        else 
            p_Val2_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1483_fu_2228_p3 <= 
        ap_const_lv3_7 when (or_ln1483_6_fu_2222_p2(0) = '1') else 
        ap_sig_allocacmp_Bucket_V_1_load;
    sub_ln1455_fu_1055_p2 <= std_logic_vector(signed(ap_const_lv7_56) - signed(ap_sig_allocacmp_count_1));
    tmp_1_fu_1139_p3 <= prevState2_V_fu_406(2 downto 2);
    tmp_2_fu_1177_p3 <= prevState2_V_fu_406(2 downto 2);
    tmp_3_fu_1215_p3 <= prevState2_V_fu_406(2 downto 2);
    tmp_4_fu_1253_p3 <= prevState2_V_fu_406(2 downto 2);
    tmp_5_fu_1291_p3 <= prevState2_V_fu_406(2 downto 2);
    tmp_6_fu_1315_p3 <= prevState2_V_fu_406(2 downto 2);
    tmp_fu_1101_p3 <= prevState2_V_fu_406(2 downto 2);
    trunc_ln1065_fu_1069_p1 <= prevState2_V_fu_406(2 - 1 downto 0);
    trunc_ln1452_fu_2468_p1 <= tmp_19_fu_1325_p89(3 - 1 downto 0);
end behav;
