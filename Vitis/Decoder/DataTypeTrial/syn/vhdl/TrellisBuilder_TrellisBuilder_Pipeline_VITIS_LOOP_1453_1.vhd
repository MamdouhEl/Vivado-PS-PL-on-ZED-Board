-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TrellisBuilder_TrellisBuilder_Pipeline_VITIS_LOOP_1453_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_Result_s : IN STD_LOGIC_VECTOR (7 downto 0);
    p_reload : IN STD_LOGIC_VECTOR (2 downto 0);
    Bucket_V : IN STD_LOGIC_VECTOR (2 downto 0);
    choice_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_1_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_2_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_3_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_5_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_6_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_7_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_8_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_9_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_10_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_11_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_12_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_13_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_14_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_15_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_16_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_17_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_18_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_19_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_20_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_21_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_22_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_23_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_24_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_25_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_26_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_27_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_28_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_29_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_30_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_31_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    choice_32_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    prevState_V_0_7_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_1_7_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_2_3_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_3_3_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_0_3_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_1_3_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_2_7_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_3_7_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_0_6_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_1_6_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_2_2_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_3_2_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_0_2_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_1_2_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_2_6_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_3_6_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_0_5_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_1_5_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_2_1_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_3_1_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_0_1_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_1_1_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_2_5_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_3_5_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_0_4_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_1_4_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_2_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_3_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_0_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_1_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_2_4_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    prevState_V_3_4_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    p_Val2_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_Val2_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of TrellisBuilder_TrellisBuilder_Pipeline_VITIS_LOOP_1453_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_2E : STD_LOGIC_VECTOR (5 downto 0) := "101110";
    constant ap_const_lv6_23 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_const_lv6_1C : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_const_lv6_11 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_const_lv6_D : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv6_33 : STD_LOGIC_VECTOR (5 downto 0) := "110011";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv6_22 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_const_lv6_1D : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_C : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_3D : STD_LOGIC_VECTOR (5 downto 0) := "111101";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_2C : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv6_13 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_const_lv6_F : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_2D : STD_LOGIC_VECTOR (5 downto 0) := "101101";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv6_12 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_const_lv6_E : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_3B : STD_LOGIC_VECTOR (5 downto 0) := "111011";
    constant ap_const_lv6_36 : STD_LOGIC_VECTOR (5 downto 0) := "110110";
    constant ap_const_lv6_2A : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_const_lv6_27 : STD_LOGIC_VECTOR (5 downto 0) := "100111";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_15 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_const_lv6_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_3A : STD_LOGIC_VECTOR (5 downto 0) := "111010";
    constant ap_const_lv6_37 : STD_LOGIC_VECTOR (5 downto 0) := "110111";
    constant ap_const_lv6_2B : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_const_lv6_26 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv6_34 : STD_LOGIC_VECTOR (5 downto 0) := "110100";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv6_25 : STD_LOGIC_VECTOR (5 downto 0) := "100101";
    constant ap_const_lv6_1A : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_const_lv6_B : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv6_1B : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_29 : STD_LOGIC_VECTOR (5 downto 0) := "101001";
    constant ap_const_lv6_35 : STD_LOGIC_VECTOR (5 downto 0) := "110101";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1453_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal tmp_5_fu_1765_p9 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_2064 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_6_fu_1785_p9 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_2069 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_1805_p9 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_2074 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_1825_p9 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_2079 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_1845_p9 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_2084 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_1865_p9 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_2089 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_1885_p9 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_2094 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_1905_p9 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_2099 : STD_LOGIC_VECTOR (0 downto 0);
    signal Bucket_V_1_fu_328 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1484_fu_1717_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_Bucket_V_1_load : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal empty_42_fu_1078_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_57_fu_1168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_72_fu_1258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_87_fu_1348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_102_fu_1438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_117_fu_1528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_132_fu_1618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln1369_fu_332 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_27_fu_990_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_phi_ln1369_load : STD_LOGIC_VECTOR (2 downto 0);
    signal k_fu_336 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_fu_1975_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_s_fu_340 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_fu_1965_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal count_fu_344 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1492_fu_791_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_count_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln1065_fu_814_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_13_fu_818_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_832_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_846_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_856_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_fu_870_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_884_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_894_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_18_fu_908_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_922_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_932_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_fu_946_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_960_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_846_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_884_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_922_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_960_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln1456_fu_800_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_970_p9 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_29_fu_1000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_28_fu_994_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_35_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_30_fu_1006_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_37_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_31_fu_1012_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_38_fu_1054_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_32_fu_1018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_fu_1060_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_33_fu_1024_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_40_fu_1066_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_34_fu_1030_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_fu_1072_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_36_fu_1042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_43_fu_1084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_44_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_50_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_45_fu_1096_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_52_fu_1138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_46_fu_1102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_53_fu_1144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_47_fu_1108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_fu_1150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_fu_1114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_55_fu_1156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_49_fu_1120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_56_fu_1162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_51_fu_1132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_58_fu_1174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_59_fu_1180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_65_fu_1216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_60_fu_1186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_67_fu_1228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_61_fu_1192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_68_fu_1234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_62_fu_1198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_69_fu_1240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_63_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_70_fu_1246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_64_fu_1210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_71_fu_1252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_66_fu_1222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_73_fu_1264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_74_fu_1270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_80_fu_1306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_75_fu_1276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_82_fu_1318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_76_fu_1282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_83_fu_1324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_77_fu_1288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_84_fu_1330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_78_fu_1294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_85_fu_1336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_fu_1300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_86_fu_1342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_81_fu_1312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_88_fu_1354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_89_fu_1360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_95_fu_1396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_90_fu_1366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_97_fu_1408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_91_fu_1372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_98_fu_1414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_92_fu_1378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_99_fu_1420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_93_fu_1384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_100_fu_1426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_94_fu_1390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_101_fu_1432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_96_fu_1402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_103_fu_1444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_104_fu_1450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_110_fu_1486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_105_fu_1456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_112_fu_1498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_106_fu_1462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_113_fu_1504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_107_fu_1468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_114_fu_1510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_108_fu_1474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_115_fu_1516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_109_fu_1480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_fu_1522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_111_fu_1492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_118_fu_1534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_119_fu_1540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_125_fu_1576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_120_fu_1546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_127_fu_1588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_121_fu_1552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_128_fu_1594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_122_fu_1558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_129_fu_1600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_123_fu_1564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_130_fu_1606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_124_fu_1570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_131_fu_1612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_126_fu_1582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_2_fu_1639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_3_fu_1645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1484_1_fu_1675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_1_fu_1633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_6_fu_1663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_7_fu_1669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_4_fu_1651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_5_fu_1657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1484_3_fu_1693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1484_4_fu_1687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1484_5_fu_1699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_fu_1627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1484_2_fu_1705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1484_fu_1681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1484_6_fu_1711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_cast_fu_1938_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_s_fu_1951_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_1101 : BOOLEAN;
    signal ap_condition_1110 : BOOLEAN;
    signal ap_condition_1118 : BOOLEAN;
    signal ap_condition_1125 : BOOLEAN;
    signal ap_condition_1131 : BOOLEAN;
    signal ap_condition_1136 : BOOLEAN;
    signal ap_condition_1140 : BOOLEAN;
    signal ap_condition_1143 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component TrellisBuilder_mux_42_6_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        din3 : IN STD_LOGIC_VECTOR (5 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component TrellisBuilder_mux_21_6_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component TrellisBuilder_mux_73_6_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        din3 : IN STD_LOGIC_VECTOR (5 downto 0);
        din4 : IN STD_LOGIC_VECTOR (5 downto 0);
        din5 : IN STD_LOGIC_VECTOR (5 downto 0);
        din6 : IN STD_LOGIC_VECTOR (5 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component TrellisBuilder_mux_73_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component TrellisBuilder_mux_83_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component TrellisBuilder_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_42_6_1_1_U68 : component TrellisBuilder_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => prevState_V_0_7_reload,
        din1 => prevState_V_1_7_reload,
        din2 => prevState_V_2_3_reload,
        din3 => prevState_V_3_3_reload,
        din4 => trunc_ln1065_fu_814_p1,
        dout => tmp_13_fu_818_p6);

    mux_42_6_1_1_U69 : component TrellisBuilder_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => prevState_V_0_3_reload,
        din1 => prevState_V_1_3_reload,
        din2 => prevState_V_2_7_reload,
        din3 => prevState_V_3_7_reload,
        din4 => trunc_ln1065_fu_814_p1,
        dout => tmp_14_fu_832_p6);

    mux_21_6_1_1_U70 : component TrellisBuilder_mux_21_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 1,
        dout_WIDTH => 6)
    port map (
        din0 => tmp_13_fu_818_p6,
        din1 => tmp_14_fu_832_p6,
        din2 => tmp_fu_846_p3,
        dout => tmp_fu_846_p4);

    mux_42_6_1_1_U71 : component TrellisBuilder_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => prevState_V_0_6_reload,
        din1 => prevState_V_1_6_reload,
        din2 => prevState_V_2_2_reload,
        din3 => prevState_V_3_2_reload,
        din4 => trunc_ln1065_fu_814_p1,
        dout => tmp_15_fu_856_p6);

    mux_42_6_1_1_U72 : component TrellisBuilder_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => prevState_V_0_2_reload,
        din1 => prevState_V_1_2_reload,
        din2 => prevState_V_2_6_reload,
        din3 => prevState_V_3_6_reload,
        din4 => trunc_ln1065_fu_814_p1,
        dout => tmp_16_fu_870_p6);

    mux_21_6_1_1_U73 : component TrellisBuilder_mux_21_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 1,
        dout_WIDTH => 6)
    port map (
        din0 => tmp_15_fu_856_p6,
        din1 => tmp_16_fu_870_p6,
        din2 => tmp_1_fu_884_p3,
        dout => tmp_1_fu_884_p4);

    mux_42_6_1_1_U74 : component TrellisBuilder_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => prevState_V_0_5_reload,
        din1 => prevState_V_1_5_reload,
        din2 => prevState_V_2_1_reload,
        din3 => prevState_V_3_1_reload,
        din4 => trunc_ln1065_fu_814_p1,
        dout => tmp_17_fu_894_p6);

    mux_42_6_1_1_U75 : component TrellisBuilder_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => prevState_V_0_1_reload,
        din1 => prevState_V_1_1_reload,
        din2 => prevState_V_2_5_reload,
        din3 => prevState_V_3_5_reload,
        din4 => trunc_ln1065_fu_814_p1,
        dout => tmp_18_fu_908_p6);

    mux_21_6_1_1_U76 : component TrellisBuilder_mux_21_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 1,
        dout_WIDTH => 6)
    port map (
        din0 => tmp_17_fu_894_p6,
        din1 => tmp_18_fu_908_p6,
        din2 => tmp_2_fu_922_p3,
        dout => tmp_2_fu_922_p4);

    mux_42_6_1_1_U77 : component TrellisBuilder_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => prevState_V_0_4_reload,
        din1 => prevState_V_1_4_reload,
        din2 => prevState_V_2_reload,
        din3 => prevState_V_3_reload,
        din4 => trunc_ln1065_fu_814_p1,
        dout => tmp_19_fu_932_p6);

    mux_42_6_1_1_U78 : component TrellisBuilder_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => prevState_V_0_reload,
        din1 => prevState_V_1_reload,
        din2 => prevState_V_2_4_reload,
        din3 => prevState_V_3_4_reload,
        din4 => trunc_ln1065_fu_814_p1,
        dout => tmp_20_fu_946_p6);

    mux_21_6_1_1_U79 : component TrellisBuilder_mux_21_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 1,
        dout_WIDTH => 6)
    port map (
        din0 => tmp_19_fu_932_p6,
        din1 => tmp_20_fu_946_p6,
        din2 => tmp_3_fu_960_p3,
        dout => tmp_3_fu_960_p4);

    mux_73_6_1_1_U80 : component TrellisBuilder_mux_73_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 6,
        din5_WIDTH => 6,
        din6_WIDTH => 6,
        din7_WIDTH => 3,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_0,
        din1 => ap_const_lv6_0,
        din2 => ap_const_lv6_0,
        din3 => tmp_fu_846_p4,
        din4 => tmp_1_fu_884_p4,
        din5 => tmp_2_fu_922_p4,
        din6 => tmp_3_fu_960_p4,
        din7 => sub_ln1456_fu_800_p2,
        dout => tmp_4_fu_970_p9);

    mux_73_1_1_1_U81 : component TrellisBuilder_mux_73_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => choice_reload,
        din4 => choice_1_reload,
        din5 => choice_2_reload,
        din6 => choice_3_reload,
        din7 => sub_ln1456_fu_800_p2,
        dout => tmp_5_fu_1765_p9);

    mux_73_1_1_1_U82 : component TrellisBuilder_mux_73_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => choice_5_reload,
        din4 => choice_6_reload,
        din5 => choice_7_reload,
        din6 => choice_8_reload,
        din7 => sub_ln1456_fu_800_p2,
        dout => tmp_6_fu_1785_p9);

    mux_73_1_1_1_U83 : component TrellisBuilder_mux_73_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => choice_9_reload,
        din4 => choice_10_reload,
        din5 => choice_11_reload,
        din6 => choice_12_reload,
        din7 => sub_ln1456_fu_800_p2,
        dout => tmp_7_fu_1805_p9);

    mux_73_1_1_1_U84 : component TrellisBuilder_mux_73_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => choice_13_reload,
        din4 => choice_14_reload,
        din5 => choice_15_reload,
        din6 => choice_16_reload,
        din7 => sub_ln1456_fu_800_p2,
        dout => tmp_8_fu_1825_p9);

    mux_73_1_1_1_U85 : component TrellisBuilder_mux_73_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => choice_17_reload,
        din4 => choice_18_reload,
        din5 => choice_19_reload,
        din6 => choice_20_reload,
        din7 => sub_ln1456_fu_800_p2,
        dout => tmp_9_fu_1845_p9);

    mux_73_1_1_1_U86 : component TrellisBuilder_mux_73_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => choice_21_reload,
        din4 => choice_22_reload,
        din5 => choice_23_reload,
        din6 => choice_24_reload,
        din7 => sub_ln1456_fu_800_p2,
        dout => tmp_s_fu_1865_p9);

    mux_73_1_1_1_U87 : component TrellisBuilder_mux_73_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => choice_25_reload,
        din4 => choice_26_reload,
        din5 => choice_27_reload,
        din6 => choice_28_reload,
        din7 => sub_ln1456_fu_800_p2,
        dout => tmp_10_fu_1885_p9);

    mux_73_1_1_1_U88 : component TrellisBuilder_mux_73_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => choice_29_reload,
        din4 => choice_30_reload,
        din5 => choice_31_reload,
        din6 => choice_32_reload,
        din7 => sub_ln1456_fu_800_p2,
        dout => tmp_11_fu_1905_p9);

    mux_83_1_1_1_U89 : component TrellisBuilder_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_5_reg_2064,
        din1 => tmp_6_reg_2069,
        din2 => tmp_7_reg_2074,
        din3 => tmp_8_reg_2079,
        din4 => tmp_9_reg_2084,
        din5 => tmp_s_reg_2089,
        din6 => tmp_10_reg_2094,
        din7 => tmp_11_reg_2099,
        din8 => Bucket_V_1_fu_328,
        dout => p_Repl2_s_fu_1951_p10);

    flow_control_loop_pipe_sequential_init_U : component TrellisBuilder_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    Bucket_V_1_fu_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_const_boolean_1 = ap_condition_1143)) then 
                    Bucket_V_1_fu_328 <= ap_const_lv3_0;
                elsif ((ap_const_boolean_1 = ap_condition_1140)) then 
                    Bucket_V_1_fu_328 <= ap_const_lv3_1;
                elsif ((ap_const_boolean_1 = ap_condition_1136)) then 
                    Bucket_V_1_fu_328 <= ap_const_lv3_2;
                elsif ((ap_const_boolean_1 = ap_condition_1131)) then 
                    Bucket_V_1_fu_328 <= ap_const_lv3_3;
                elsif ((ap_const_boolean_1 = ap_condition_1125)) then 
                    Bucket_V_1_fu_328 <= ap_const_lv3_4;
                elsif ((ap_const_boolean_1 = ap_condition_1118)) then 
                    Bucket_V_1_fu_328 <= ap_const_lv3_5;
                elsif ((ap_const_boolean_1 = ap_condition_1110)) then 
                    Bucket_V_1_fu_328 <= ap_const_lv3_6;
                elsif ((ap_const_boolean_1 = ap_condition_1101)) then 
                    Bucket_V_1_fu_328 <= select_ln1484_fu_1717_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    Bucket_V_1_fu_328 <= Bucket_V;
                end if;
            end if; 
        end if;
    end process;

    count_fu_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1453_fu_785_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    count_fu_344 <= add_ln1492_fu_791_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    count_fu_344 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    k_fu_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_336 <= ap_const_lv3_3;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    k_fu_336 <= k_1_fu_1975_p2;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_Val2_s_fu_340 <= p_Result_s;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    p_Val2_s_fu_340 <= p_Result_1_fu_1965_p4;
                end if;
            end if; 
        end if;
    end process;

    phi_ln1369_fu_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1453_fu_785_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    phi_ln1369_fu_332 <= empty_27_fu_990_p1;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    phi_ln1369_fu_332 <= p_reload;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1453_fu_785_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_10_reg_2094 <= tmp_10_fu_1885_p9;
                tmp_11_reg_2099 <= tmp_11_fu_1905_p9;
                tmp_5_reg_2064 <= tmp_5_fu_1765_p9;
                tmp_6_reg_2069 <= tmp_6_fu_1785_p9;
                tmp_7_reg_2074 <= tmp_7_fu_1805_p9;
                tmp_8_reg_2079 <= tmp_8_fu_1825_p9;
                tmp_9_reg_2084 <= tmp_9_fu_1845_p9;
                tmp_s_reg_2089 <= tmp_s_fu_1865_p9;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1492_fu_791_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_count_1) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1101_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1453_fu_785_p2, empty_42_fu_1078_p2, empty_57_fu_1168_p2, empty_72_fu_1258_p2, empty_87_fu_1348_p2, empty_102_fu_1438_p2, empty_117_fu_1528_p2, empty_132_fu_1618_p2)
    begin
                ap_condition_1101 <= ((icmp_ln1453_fu_785_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (empty_132_fu_1618_p2 = ap_const_lv1_0) and (empty_117_fu_1528_p2 = ap_const_lv1_0) and (empty_102_fu_1438_p2 = ap_const_lv1_0) and (empty_87_fu_1348_p2 = ap_const_lv1_0) and (empty_72_fu_1258_p2 = ap_const_lv1_0) and (empty_57_fu_1168_p2 = ap_const_lv1_0) and (empty_42_fu_1078_p2 = ap_const_lv1_0));
    end process;


    ap_condition_1110_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1453_fu_785_p2, empty_42_fu_1078_p2, empty_57_fu_1168_p2, empty_72_fu_1258_p2, empty_87_fu_1348_p2, empty_102_fu_1438_p2, empty_117_fu_1528_p2, empty_132_fu_1618_p2)
    begin
                ap_condition_1110 <= ((icmp_ln1453_fu_785_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (empty_132_fu_1618_p2 = ap_const_lv1_1) and (empty_117_fu_1528_p2 = ap_const_lv1_0) and (empty_102_fu_1438_p2 = ap_const_lv1_0) and (empty_87_fu_1348_p2 = ap_const_lv1_0) and (empty_72_fu_1258_p2 = ap_const_lv1_0) and (empty_57_fu_1168_p2 = ap_const_lv1_0) and (empty_42_fu_1078_p2 = ap_const_lv1_0));
    end process;


    ap_condition_1118_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1453_fu_785_p2, empty_42_fu_1078_p2, empty_57_fu_1168_p2, empty_72_fu_1258_p2, empty_87_fu_1348_p2, empty_102_fu_1438_p2, empty_117_fu_1528_p2)
    begin
                ap_condition_1118 <= ((icmp_ln1453_fu_785_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (empty_117_fu_1528_p2 = ap_const_lv1_1) and (empty_102_fu_1438_p2 = ap_const_lv1_0) and (empty_87_fu_1348_p2 = ap_const_lv1_0) and (empty_72_fu_1258_p2 = ap_const_lv1_0) and (empty_57_fu_1168_p2 = ap_const_lv1_0) and (empty_42_fu_1078_p2 = ap_const_lv1_0));
    end process;


    ap_condition_1125_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1453_fu_785_p2, empty_42_fu_1078_p2, empty_57_fu_1168_p2, empty_72_fu_1258_p2, empty_87_fu_1348_p2, empty_102_fu_1438_p2)
    begin
                ap_condition_1125 <= ((icmp_ln1453_fu_785_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (empty_102_fu_1438_p2 = ap_const_lv1_1) and (empty_87_fu_1348_p2 = ap_const_lv1_0) and (empty_72_fu_1258_p2 = ap_const_lv1_0) and (empty_57_fu_1168_p2 = ap_const_lv1_0) and (empty_42_fu_1078_p2 = ap_const_lv1_0));
    end process;


    ap_condition_1131_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1453_fu_785_p2, empty_42_fu_1078_p2, empty_57_fu_1168_p2, empty_72_fu_1258_p2, empty_87_fu_1348_p2)
    begin
                ap_condition_1131 <= ((icmp_ln1453_fu_785_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (empty_87_fu_1348_p2 = ap_const_lv1_1) and (empty_72_fu_1258_p2 = ap_const_lv1_0) and (empty_57_fu_1168_p2 = ap_const_lv1_0) and (empty_42_fu_1078_p2 = ap_const_lv1_0));
    end process;


    ap_condition_1136_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1453_fu_785_p2, empty_42_fu_1078_p2, empty_57_fu_1168_p2, empty_72_fu_1258_p2)
    begin
                ap_condition_1136 <= ((icmp_ln1453_fu_785_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (empty_72_fu_1258_p2 = ap_const_lv1_1) and (empty_57_fu_1168_p2 = ap_const_lv1_0) and (empty_42_fu_1078_p2 = ap_const_lv1_0));
    end process;


    ap_condition_1140_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1453_fu_785_p2, empty_42_fu_1078_p2, empty_57_fu_1168_p2)
    begin
                ap_condition_1140 <= ((icmp_ln1453_fu_785_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (empty_57_fu_1168_p2 = ap_const_lv1_1) and (empty_42_fu_1078_p2 = ap_const_lv1_0));
    end process;


    ap_condition_1143_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1453_fu_785_p2, empty_42_fu_1078_p2)
    begin
                ap_condition_1143 <= ((icmp_ln1453_fu_785_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (empty_42_fu_1078_p2 = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1453_fu_785_p2)
    begin
        if (((icmp_ln1453_fu_785_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_Bucket_V_1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, Bucket_V, Bucket_V_1_fu_328, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_Bucket_V_1_load <= Bucket_V;
        else 
            ap_sig_allocacmp_Bucket_V_1_load <= Bucket_V_1_fu_328;
        end if; 
    end process;


    ap_sig_allocacmp_count_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, count_fu_344)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_count_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_count_1 <= count_fu_344;
        end if; 
    end process;


    ap_sig_allocacmp_phi_ln1369_load_assign_proc : process(ap_CS_fsm_pp0_stage0, p_reload, ap_loop_init, ap_block_pp0_stage0, phi_ln1369_fu_332)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_phi_ln1369_load <= p_reload;
        else 
            ap_sig_allocacmp_phi_ln1369_load <= phi_ln1369_fu_332;
        end if; 
    end process;

    empty_100_fu_1426_p2 <= (empty_99_fu_1420_p2 or empty_93_fu_1384_p2);
    empty_101_fu_1432_p2 <= (empty_94_fu_1390_p2 or empty_100_fu_1426_p2);
    empty_102_fu_1438_p2 <= (empty_96_fu_1402_p2 or empty_101_fu_1432_p2);
    empty_103_fu_1444_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_3A) else "0";
    empty_104_fu_1450_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_37) else "0";
    empty_105_fu_1456_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_2B) else "0";
    empty_106_fu_1462_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_26) else "0";
    empty_107_fu_1468_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_19) else "0";
    empty_108_fu_1474_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_14) else "0";
    empty_109_fu_1480_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_8) else "0";
    empty_110_fu_1486_p2 <= (empty_104_fu_1450_p2 or empty_103_fu_1444_p2);
    empty_111_fu_1492_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_5) else "0";
    empty_112_fu_1498_p2 <= (empty_110_fu_1486_p2 or empty_105_fu_1456_p2);
    empty_113_fu_1504_p2 <= (empty_112_fu_1498_p2 or empty_106_fu_1462_p2);
    empty_114_fu_1510_p2 <= (empty_113_fu_1504_p2 or empty_107_fu_1468_p2);
    empty_115_fu_1516_p2 <= (empty_114_fu_1510_p2 or empty_108_fu_1474_p2);
    empty_116_fu_1522_p2 <= (empty_115_fu_1516_p2 or empty_109_fu_1480_p2);
    empty_117_fu_1528_p2 <= (empty_116_fu_1522_p2 or empty_111_fu_1492_p2);
    empty_118_fu_1534_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_39) else "0";
    empty_119_fu_1540_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_34) else "0";
    empty_120_fu_1546_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_28) else "0";
    empty_121_fu_1552_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_25) else "0";
    empty_122_fu_1558_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_1A) else "0";
    empty_123_fu_1564_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_17) else "0";
    empty_124_fu_1570_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_B) else "0";
    empty_125_fu_1576_p2 <= (empty_119_fu_1540_p2 or empty_118_fu_1534_p2);
    empty_126_fu_1582_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_6) else "0";
    empty_127_fu_1588_p2 <= (empty_125_fu_1576_p2 or empty_120_fu_1546_p2);
    empty_128_fu_1594_p2 <= (empty_127_fu_1588_p2 or empty_121_fu_1552_p2);
    empty_129_fu_1600_p2 <= (empty_128_fu_1594_p2 or empty_122_fu_1558_p2);
    empty_130_fu_1606_p2 <= (empty_129_fu_1600_p2 or empty_123_fu_1564_p2);
    empty_131_fu_1612_p2 <= (empty_130_fu_1606_p2 or empty_124_fu_1570_p2);
    empty_132_fu_1618_p2 <= (empty_131_fu_1612_p2 or empty_126_fu_1582_p2);
    empty_27_fu_990_p1 <= tmp_4_fu_970_p9(3 - 1 downto 0);
    empty_28_fu_994_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_3F) else "0";
    empty_29_fu_1000_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_32) else "0";
    empty_30_fu_1006_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_2E) else "0";
    empty_31_fu_1012_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_23) else "0";
    empty_32_fu_1018_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_1C) else "0";
    empty_33_fu_1024_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_11) else "0";
    empty_34_fu_1030_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_D) else "0";
    empty_35_fu_1036_p2 <= (empty_29_fu_1000_p2 or empty_28_fu_994_p2);
    empty_36_fu_1042_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_0) else "0";
    empty_37_fu_1048_p2 <= (empty_35_fu_1036_p2 or empty_30_fu_1006_p2);
    empty_38_fu_1054_p2 <= (empty_37_fu_1048_p2 or empty_31_fu_1012_p2);
    empty_39_fu_1060_p2 <= (empty_38_fu_1054_p2 or empty_32_fu_1018_p2);
    empty_40_fu_1066_p2 <= (empty_39_fu_1060_p2 or empty_33_fu_1024_p2);
    empty_41_fu_1072_p2 <= (empty_40_fu_1066_p2 or empty_34_fu_1030_p2);
    empty_42_fu_1078_p2 <= (empty_41_fu_1072_p2 or empty_36_fu_1042_p2);
    empty_43_fu_1084_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_3E) else "0";
    empty_44_fu_1090_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_33) else "0";
    empty_45_fu_1096_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_2F) else "0";
    empty_46_fu_1102_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_22) else "0";
    empty_47_fu_1108_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_1D) else "0";
    empty_48_fu_1114_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_10) else "0";
    empty_49_fu_1120_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_C) else "0";
    empty_50_fu_1126_p2 <= (empty_44_fu_1090_p2 or empty_43_fu_1084_p2);
    empty_51_fu_1132_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_1) else "0";
    empty_52_fu_1138_p2 <= (empty_50_fu_1126_p2 or empty_45_fu_1096_p2);
    empty_53_fu_1144_p2 <= (empty_52_fu_1138_p2 or empty_46_fu_1102_p2);
    empty_54_fu_1150_p2 <= (empty_53_fu_1144_p2 or empty_47_fu_1108_p2);
    empty_55_fu_1156_p2 <= (empty_54_fu_1150_p2 or empty_48_fu_1114_p2);
    empty_56_fu_1162_p2 <= (empty_55_fu_1156_p2 or empty_49_fu_1120_p2);
    empty_57_fu_1168_p2 <= (empty_56_fu_1162_p2 or empty_51_fu_1132_p2);
    empty_58_fu_1174_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_3D) else "0";
    empty_59_fu_1180_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_30) else "0";
    empty_60_fu_1186_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_2C) else "0";
    empty_61_fu_1192_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_21) else "0";
    empty_62_fu_1198_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_1E) else "0";
    empty_63_fu_1204_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_13) else "0";
    empty_64_fu_1210_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_F) else "0";
    empty_65_fu_1216_p2 <= (empty_59_fu_1180_p2 or empty_58_fu_1174_p2);
    empty_66_fu_1222_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_2) else "0";
    empty_67_fu_1228_p2 <= (empty_65_fu_1216_p2 or empty_60_fu_1186_p2);
    empty_68_fu_1234_p2 <= (empty_67_fu_1228_p2 or empty_61_fu_1192_p2);
    empty_69_fu_1240_p2 <= (empty_68_fu_1234_p2 or empty_62_fu_1198_p2);
    empty_70_fu_1246_p2 <= (empty_69_fu_1240_p2 or empty_63_fu_1204_p2);
    empty_71_fu_1252_p2 <= (empty_70_fu_1246_p2 or empty_64_fu_1210_p2);
    empty_72_fu_1258_p2 <= (empty_71_fu_1252_p2 or empty_66_fu_1222_p2);
    empty_73_fu_1264_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_3C) else "0";
    empty_74_fu_1270_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_31) else "0";
    empty_75_fu_1276_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_2D) else "0";
    empty_76_fu_1282_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_20) else "0";
    empty_77_fu_1288_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_1F) else "0";
    empty_78_fu_1294_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_12) else "0";
    empty_79_fu_1300_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_E) else "0";
    empty_80_fu_1306_p2 <= (empty_74_fu_1270_p2 or empty_73_fu_1264_p2);
    empty_81_fu_1312_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_3) else "0";
    empty_82_fu_1318_p2 <= (empty_80_fu_1306_p2 or empty_75_fu_1276_p2);
    empty_83_fu_1324_p2 <= (empty_82_fu_1318_p2 or empty_76_fu_1282_p2);
    empty_84_fu_1330_p2 <= (empty_83_fu_1324_p2 or empty_77_fu_1288_p2);
    empty_85_fu_1336_p2 <= (empty_84_fu_1330_p2 or empty_78_fu_1294_p2);
    empty_86_fu_1342_p2 <= (empty_85_fu_1336_p2 or empty_79_fu_1300_p2);
    empty_87_fu_1348_p2 <= (empty_86_fu_1342_p2 or empty_81_fu_1312_p2);
    empty_88_fu_1354_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_3B) else "0";
    empty_89_fu_1360_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_36) else "0";
    empty_90_fu_1366_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_2A) else "0";
    empty_91_fu_1372_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_27) else "0";
    empty_92_fu_1378_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_18) else "0";
    empty_93_fu_1384_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_15) else "0";
    empty_94_fu_1390_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_9) else "0";
    empty_95_fu_1396_p2 <= (empty_89_fu_1360_p2 or empty_88_fu_1354_p2);
    empty_96_fu_1402_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_4) else "0";
    empty_97_fu_1408_p2 <= (empty_95_fu_1396_p2 or empty_90_fu_1366_p2);
    empty_98_fu_1414_p2 <= (empty_97_fu_1408_p2 or empty_91_fu_1372_p2);
    empty_99_fu_1420_p2 <= (empty_98_fu_1414_p2 or empty_92_fu_1378_p2);
    icmp_ln1065_1_fu_1633_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_A) else "0";
    icmp_ln1065_2_fu_1639_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_16) else "0";
    icmp_ln1065_3_fu_1645_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_1B) else "0";
    icmp_ln1065_4_fu_1651_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_24) else "0";
    icmp_ln1065_5_fu_1657_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_29) else "0";
    icmp_ln1065_6_fu_1663_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_35) else "0";
    icmp_ln1065_7_fu_1669_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_38) else "0";
    icmp_ln1065_fu_1627_p2 <= "1" when (tmp_4_fu_970_p9 = ap_const_lv6_7) else "0";
    icmp_ln1453_fu_785_p2 <= "1" when (ap_sig_allocacmp_count_1 = ap_const_lv3_4) else "0";
    k_1_fu_1975_p2 <= std_logic_vector(unsigned(k_fu_336) + unsigned(ap_const_lv3_7));
    k_cast_fu_1938_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_fu_336),32));
    or_ln1484_1_fu_1675_p2 <= (icmp_ln1065_3_fu_1645_p2 or icmp_ln1065_2_fu_1639_p2);
    or_ln1484_2_fu_1705_p2 <= (or_ln1484_5_fu_1699_p2 or icmp_ln1065_fu_1627_p2);
    or_ln1484_3_fu_1693_p2 <= (icmp_ln1065_5_fu_1657_p2 or icmp_ln1065_4_fu_1651_p2);
    or_ln1484_4_fu_1687_p2 <= (icmp_ln1065_7_fu_1669_p2 or icmp_ln1065_6_fu_1663_p2);
    or_ln1484_5_fu_1699_p2 <= (or_ln1484_4_fu_1687_p2 or or_ln1484_3_fu_1693_p2);
    or_ln1484_6_fu_1711_p2 <= (or_ln1484_fu_1681_p2 or or_ln1484_2_fu_1705_p2);
    or_ln1484_fu_1681_p2 <= (or_ln1484_1_fu_1675_p2 or icmp_ln1065_1_fu_1633_p2);
    
    p_Result_1_fu_1965_p4_proc : process(p_Val2_s_fu_340, k_cast_fu_1938_p1, p_Repl2_s_fu_1951_p10)
    begin
        p_Result_1_fu_1965_p4 <= p_Val2_s_fu_340;
        if to_integer(unsigned(k_cast_fu_1938_p1)) >= p_Val2_s_fu_340'low and to_integer(unsigned(k_cast_fu_1938_p1)) <= p_Val2_s_fu_340'high then
            p_Result_1_fu_1965_p4(to_integer(unsigned(k_cast_fu_1938_p1))) <= p_Repl2_s_fu_1951_p10(0);
        end if;
    end process;

    p_Val2_1_out <= p_Val2_s_fu_340;

    p_Val2_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1453_fu_785_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1453_fu_785_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_Val2_1_out_ap_vld <= ap_const_logic_1;
        else 
            p_Val2_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1484_fu_1717_p3 <= 
        ap_const_lv3_7 when (or_ln1484_6_fu_1711_p2(0) = '1') else 
        ap_sig_allocacmp_Bucket_V_1_load;
    sub_ln1456_fu_800_p2 <= std_logic_vector(signed(ap_const_lv3_6) - signed(ap_sig_allocacmp_count_1));
    tmp_1_fu_884_p3 <= ap_sig_allocacmp_phi_ln1369_load(2 downto 2);
    tmp_2_fu_922_p3 <= ap_sig_allocacmp_phi_ln1369_load(2 downto 2);
    tmp_3_fu_960_p3 <= ap_sig_allocacmp_phi_ln1369_load(2 downto 2);
    tmp_fu_846_p3 <= ap_sig_allocacmp_phi_ln1369_load(2 downto 2);
    trunc_ln1065_fu_814_p1 <= ap_sig_allocacmp_phi_ln1369_load(2 - 1 downto 0);
end behav;
