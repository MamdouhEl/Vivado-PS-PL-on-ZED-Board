// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TrellisBuilder_TrellisBuilder_Pipeline_VITIS_LOOP_1452_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_Result_s,
        p_reload,
        Bucket_V,
        choice_reload,
        choice_1_reload,
        choice_2_reload,
        choice_3_reload,
        choice_5_reload,
        choice_6_reload,
        choice_7_reload,
        choice_8_reload,
        choice_9_reload,
        choice_10_reload,
        choice_11_reload,
        choice_12_reload,
        choice_13_reload,
        choice_14_reload,
        choice_15_reload,
        choice_16_reload,
        choice_17_reload,
        choice_18_reload,
        choice_19_reload,
        choice_20_reload,
        choice_21_reload,
        choice_22_reload,
        choice_23_reload,
        choice_24_reload,
        choice_25_reload,
        choice_26_reload,
        choice_27_reload,
        choice_28_reload,
        choice_29_reload,
        choice_30_reload,
        choice_31_reload,
        choice_32_reload,
        prevState_V_0_7_reload,
        prevState_V_1_7_reload,
        prevState_V_2_3_reload,
        prevState_V_3_3_reload,
        prevState_V_0_3_reload,
        prevState_V_1_3_reload,
        prevState_V_2_7_reload,
        prevState_V_3_7_reload,
        prevState_V_0_6_reload,
        prevState_V_1_6_reload,
        prevState_V_2_2_reload,
        prevState_V_3_2_reload,
        prevState_V_0_2_reload,
        prevState_V_1_2_reload,
        prevState_V_2_6_reload,
        prevState_V_3_6_reload,
        prevState_V_0_5_reload,
        prevState_V_1_5_reload,
        prevState_V_2_1_reload,
        prevState_V_3_1_reload,
        prevState_V_0_1_reload,
        prevState_V_1_1_reload,
        prevState_V_2_5_reload,
        prevState_V_3_5_reload,
        prevState_V_0_4_reload,
        prevState_V_1_4_reload,
        prevState_V_2_reload,
        prevState_V_3_reload,
        prevState_V_0_reload,
        prevState_V_1_reload,
        prevState_V_2_4_reload,
        prevState_V_3_4_reload,
        p_Val2_1_out,
        p_Val2_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] p_Result_s;
input  [2:0] p_reload;
input  [2:0] Bucket_V;
input  [0:0] choice_reload;
input  [0:0] choice_1_reload;
input  [0:0] choice_2_reload;
input  [0:0] choice_3_reload;
input  [0:0] choice_5_reload;
input  [0:0] choice_6_reload;
input  [0:0] choice_7_reload;
input  [0:0] choice_8_reload;
input  [0:0] choice_9_reload;
input  [0:0] choice_10_reload;
input  [0:0] choice_11_reload;
input  [0:0] choice_12_reload;
input  [0:0] choice_13_reload;
input  [0:0] choice_14_reload;
input  [0:0] choice_15_reload;
input  [0:0] choice_16_reload;
input  [0:0] choice_17_reload;
input  [0:0] choice_18_reload;
input  [0:0] choice_19_reload;
input  [0:0] choice_20_reload;
input  [0:0] choice_21_reload;
input  [0:0] choice_22_reload;
input  [0:0] choice_23_reload;
input  [0:0] choice_24_reload;
input  [0:0] choice_25_reload;
input  [0:0] choice_26_reload;
input  [0:0] choice_27_reload;
input  [0:0] choice_28_reload;
input  [0:0] choice_29_reload;
input  [0:0] choice_30_reload;
input  [0:0] choice_31_reload;
input  [0:0] choice_32_reload;
input  [5:0] prevState_V_0_7_reload;
input  [5:0] prevState_V_1_7_reload;
input  [5:0] prevState_V_2_3_reload;
input  [5:0] prevState_V_3_3_reload;
input  [5:0] prevState_V_0_3_reload;
input  [5:0] prevState_V_1_3_reload;
input  [5:0] prevState_V_2_7_reload;
input  [5:0] prevState_V_3_7_reload;
input  [5:0] prevState_V_0_6_reload;
input  [5:0] prevState_V_1_6_reload;
input  [5:0] prevState_V_2_2_reload;
input  [5:0] prevState_V_3_2_reload;
input  [5:0] prevState_V_0_2_reload;
input  [5:0] prevState_V_1_2_reload;
input  [5:0] prevState_V_2_6_reload;
input  [5:0] prevState_V_3_6_reload;
input  [5:0] prevState_V_0_5_reload;
input  [5:0] prevState_V_1_5_reload;
input  [5:0] prevState_V_2_1_reload;
input  [5:0] prevState_V_3_1_reload;
input  [5:0] prevState_V_0_1_reload;
input  [5:0] prevState_V_1_1_reload;
input  [5:0] prevState_V_2_5_reload;
input  [5:0] prevState_V_3_5_reload;
input  [5:0] prevState_V_0_4_reload;
input  [5:0] prevState_V_1_4_reload;
input  [5:0] prevState_V_2_reload;
input  [5:0] prevState_V_3_reload;
input  [5:0] prevState_V_0_reload;
input  [5:0] prevState_V_1_reload;
input  [5:0] prevState_V_2_4_reload;
input  [5:0] prevState_V_3_4_reload;
output  [7:0] p_Val2_1_out;
output   p_Val2_1_out_ap_vld;

reg ap_idle;
reg p_Val2_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1452_fu_785_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [0:0] tmp_5_fu_1765_p9;
reg   [0:0] tmp_5_reg_2064;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_6_fu_1785_p9;
reg   [0:0] tmp_6_reg_2069;
wire   [0:0] tmp_7_fu_1805_p9;
reg   [0:0] tmp_7_reg_2074;
wire   [0:0] tmp_8_fu_1825_p9;
reg   [0:0] tmp_8_reg_2079;
wire   [0:0] tmp_9_fu_1845_p9;
reg   [0:0] tmp_9_reg_2084;
wire   [0:0] tmp_s_fu_1865_p9;
reg   [0:0] tmp_s_reg_2089;
wire   [0:0] tmp_10_fu_1885_p9;
reg   [0:0] tmp_10_reg_2094;
wire   [0:0] tmp_11_fu_1905_p9;
reg   [0:0] tmp_11_reg_2099;
reg   [2:0] Bucket_V_1_fu_328;
wire   [2:0] select_ln1483_fu_1717_p3;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_Bucket_V_1_load;
wire    ap_block_pp0_stage0;
wire   [0:0] empty_42_fu_1078_p2;
wire   [0:0] empty_57_fu_1168_p2;
wire   [0:0] empty_72_fu_1258_p2;
wire   [0:0] empty_87_fu_1348_p2;
wire   [0:0] empty_102_fu_1438_p2;
wire   [0:0] empty_117_fu_1528_p2;
wire   [0:0] empty_132_fu_1618_p2;
reg   [2:0] phi_ln1368_fu_332;
wire   [2:0] empty_27_fu_990_p1;
reg   [2:0] ap_sig_allocacmp_phi_ln1368_load;
reg   [2:0] k_fu_336;
wire   [2:0] k_1_fu_1975_p2;
reg   [7:0] p_Val2_s_fu_340;
reg   [7:0] p_Result_1_fu_1965_p4;
reg   [2:0] count_fu_344;
wire   [2:0] add_ln1491_fu_791_p2;
reg   [2:0] ap_sig_allocacmp_count_1;
wire    ap_block_pp0_stage0_01001;
wire   [1:0] trunc_ln1065_fu_814_p1;
wire   [5:0] tmp_13_fu_818_p6;
wire   [5:0] tmp_14_fu_832_p6;
wire   [0:0] tmp_fu_846_p3;
wire   [5:0] tmp_15_fu_856_p6;
wire   [5:0] tmp_16_fu_870_p6;
wire   [0:0] tmp_1_fu_884_p3;
wire   [5:0] tmp_17_fu_894_p6;
wire   [5:0] tmp_18_fu_908_p6;
wire   [0:0] tmp_2_fu_922_p3;
wire   [5:0] tmp_19_fu_932_p6;
wire   [5:0] tmp_20_fu_946_p6;
wire   [0:0] tmp_3_fu_960_p3;
wire   [5:0] tmp_fu_846_p4;
wire   [5:0] tmp_1_fu_884_p4;
wire   [5:0] tmp_2_fu_922_p4;
wire   [5:0] tmp_3_fu_960_p4;
wire   [2:0] sub_ln1455_fu_800_p2;
wire   [5:0] tmp_4_fu_970_p9;
wire   [0:0] empty_29_fu_1000_p2;
wire   [0:0] empty_28_fu_994_p2;
wire   [0:0] empty_35_fu_1036_p2;
wire   [0:0] empty_30_fu_1006_p2;
wire   [0:0] empty_37_fu_1048_p2;
wire   [0:0] empty_31_fu_1012_p2;
wire   [0:0] empty_38_fu_1054_p2;
wire   [0:0] empty_32_fu_1018_p2;
wire   [0:0] empty_39_fu_1060_p2;
wire   [0:0] empty_33_fu_1024_p2;
wire   [0:0] empty_40_fu_1066_p2;
wire   [0:0] empty_34_fu_1030_p2;
wire   [0:0] empty_41_fu_1072_p2;
wire   [0:0] empty_36_fu_1042_p2;
wire   [0:0] empty_43_fu_1084_p2;
wire   [0:0] empty_44_fu_1090_p2;
wire   [0:0] empty_50_fu_1126_p2;
wire   [0:0] empty_45_fu_1096_p2;
wire   [0:0] empty_52_fu_1138_p2;
wire   [0:0] empty_46_fu_1102_p2;
wire   [0:0] empty_53_fu_1144_p2;
wire   [0:0] empty_47_fu_1108_p2;
wire   [0:0] empty_54_fu_1150_p2;
wire   [0:0] empty_48_fu_1114_p2;
wire   [0:0] empty_55_fu_1156_p2;
wire   [0:0] empty_49_fu_1120_p2;
wire   [0:0] empty_56_fu_1162_p2;
wire   [0:0] empty_51_fu_1132_p2;
wire   [0:0] empty_58_fu_1174_p2;
wire   [0:0] empty_59_fu_1180_p2;
wire   [0:0] empty_65_fu_1216_p2;
wire   [0:0] empty_60_fu_1186_p2;
wire   [0:0] empty_67_fu_1228_p2;
wire   [0:0] empty_61_fu_1192_p2;
wire   [0:0] empty_68_fu_1234_p2;
wire   [0:0] empty_62_fu_1198_p2;
wire   [0:0] empty_69_fu_1240_p2;
wire   [0:0] empty_63_fu_1204_p2;
wire   [0:0] empty_70_fu_1246_p2;
wire   [0:0] empty_64_fu_1210_p2;
wire   [0:0] empty_71_fu_1252_p2;
wire   [0:0] empty_66_fu_1222_p2;
wire   [0:0] empty_73_fu_1264_p2;
wire   [0:0] empty_74_fu_1270_p2;
wire   [0:0] empty_80_fu_1306_p2;
wire   [0:0] empty_75_fu_1276_p2;
wire   [0:0] empty_82_fu_1318_p2;
wire   [0:0] empty_76_fu_1282_p2;
wire   [0:0] empty_83_fu_1324_p2;
wire   [0:0] empty_77_fu_1288_p2;
wire   [0:0] empty_84_fu_1330_p2;
wire   [0:0] empty_78_fu_1294_p2;
wire   [0:0] empty_85_fu_1336_p2;
wire   [0:0] empty_79_fu_1300_p2;
wire   [0:0] empty_86_fu_1342_p2;
wire   [0:0] empty_81_fu_1312_p2;
wire   [0:0] empty_88_fu_1354_p2;
wire   [0:0] empty_89_fu_1360_p2;
wire   [0:0] empty_95_fu_1396_p2;
wire   [0:0] empty_90_fu_1366_p2;
wire   [0:0] empty_97_fu_1408_p2;
wire   [0:0] empty_91_fu_1372_p2;
wire   [0:0] empty_98_fu_1414_p2;
wire   [0:0] empty_92_fu_1378_p2;
wire   [0:0] empty_99_fu_1420_p2;
wire   [0:0] empty_93_fu_1384_p2;
wire   [0:0] empty_100_fu_1426_p2;
wire   [0:0] empty_94_fu_1390_p2;
wire   [0:0] empty_101_fu_1432_p2;
wire   [0:0] empty_96_fu_1402_p2;
wire   [0:0] empty_103_fu_1444_p2;
wire   [0:0] empty_104_fu_1450_p2;
wire   [0:0] empty_110_fu_1486_p2;
wire   [0:0] empty_105_fu_1456_p2;
wire   [0:0] empty_112_fu_1498_p2;
wire   [0:0] empty_106_fu_1462_p2;
wire   [0:0] empty_113_fu_1504_p2;
wire   [0:0] empty_107_fu_1468_p2;
wire   [0:0] empty_114_fu_1510_p2;
wire   [0:0] empty_108_fu_1474_p2;
wire   [0:0] empty_115_fu_1516_p2;
wire   [0:0] empty_109_fu_1480_p2;
wire   [0:0] empty_116_fu_1522_p2;
wire   [0:0] empty_111_fu_1492_p2;
wire   [0:0] empty_118_fu_1534_p2;
wire   [0:0] empty_119_fu_1540_p2;
wire   [0:0] empty_125_fu_1576_p2;
wire   [0:0] empty_120_fu_1546_p2;
wire   [0:0] empty_127_fu_1588_p2;
wire   [0:0] empty_121_fu_1552_p2;
wire   [0:0] empty_128_fu_1594_p2;
wire   [0:0] empty_122_fu_1558_p2;
wire   [0:0] empty_129_fu_1600_p2;
wire   [0:0] empty_123_fu_1564_p2;
wire   [0:0] empty_130_fu_1606_p2;
wire   [0:0] empty_124_fu_1570_p2;
wire   [0:0] empty_131_fu_1612_p2;
wire   [0:0] empty_126_fu_1582_p2;
wire   [0:0] icmp_ln1065_2_fu_1639_p2;
wire   [0:0] icmp_ln1065_3_fu_1645_p2;
wire   [0:0] or_ln1483_1_fu_1675_p2;
wire   [0:0] icmp_ln1065_1_fu_1633_p2;
wire   [0:0] icmp_ln1065_6_fu_1663_p2;
wire   [0:0] icmp_ln1065_7_fu_1669_p2;
wire   [0:0] icmp_ln1065_4_fu_1651_p2;
wire   [0:0] icmp_ln1065_5_fu_1657_p2;
wire   [0:0] or_ln1483_3_fu_1693_p2;
wire   [0:0] or_ln1483_4_fu_1687_p2;
wire   [0:0] or_ln1483_5_fu_1699_p2;
wire   [0:0] icmp_ln1065_fu_1627_p2;
wire   [0:0] or_ln1483_2_fu_1705_p2;
wire   [0:0] or_ln1483_fu_1681_p2;
wire   [0:0] or_ln1483_6_fu_1711_p2;
wire   [31:0] k_cast_fu_1938_p1;
wire   [0:0] p_Repl2_s_fu_1951_p10;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_1101;
reg    ap_condition_1110;
reg    ap_condition_1118;
reg    ap_condition_1125;
reg    ap_condition_1131;
reg    ap_condition_1136;
reg    ap_condition_1140;
reg    ap_condition_1143;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

TrellisBuilder_mux_42_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
mux_42_6_1_1_U68(
    .din0(prevState_V_0_7_reload),
    .din1(prevState_V_1_7_reload),
    .din2(prevState_V_2_3_reload),
    .din3(prevState_V_3_3_reload),
    .din4(trunc_ln1065_fu_814_p1),
    .dout(tmp_13_fu_818_p6)
);

TrellisBuilder_mux_42_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
mux_42_6_1_1_U69(
    .din0(prevState_V_0_3_reload),
    .din1(prevState_V_1_3_reload),
    .din2(prevState_V_2_7_reload),
    .din3(prevState_V_3_7_reload),
    .din4(trunc_ln1065_fu_814_p1),
    .dout(tmp_14_fu_832_p6)
);

TrellisBuilder_mux_21_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 6 ))
mux_21_6_1_1_U70(
    .din0(tmp_13_fu_818_p6),
    .din1(tmp_14_fu_832_p6),
    .din2(tmp_fu_846_p3),
    .dout(tmp_fu_846_p4)
);

TrellisBuilder_mux_42_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
mux_42_6_1_1_U71(
    .din0(prevState_V_0_6_reload),
    .din1(prevState_V_1_6_reload),
    .din2(prevState_V_2_2_reload),
    .din3(prevState_V_3_2_reload),
    .din4(trunc_ln1065_fu_814_p1),
    .dout(tmp_15_fu_856_p6)
);

TrellisBuilder_mux_42_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
mux_42_6_1_1_U72(
    .din0(prevState_V_0_2_reload),
    .din1(prevState_V_1_2_reload),
    .din2(prevState_V_2_6_reload),
    .din3(prevState_V_3_6_reload),
    .din4(trunc_ln1065_fu_814_p1),
    .dout(tmp_16_fu_870_p6)
);

TrellisBuilder_mux_21_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 6 ))
mux_21_6_1_1_U73(
    .din0(tmp_15_fu_856_p6),
    .din1(tmp_16_fu_870_p6),
    .din2(tmp_1_fu_884_p3),
    .dout(tmp_1_fu_884_p4)
);

TrellisBuilder_mux_42_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
mux_42_6_1_1_U74(
    .din0(prevState_V_0_5_reload),
    .din1(prevState_V_1_5_reload),
    .din2(prevState_V_2_1_reload),
    .din3(prevState_V_3_1_reload),
    .din4(trunc_ln1065_fu_814_p1),
    .dout(tmp_17_fu_894_p6)
);

TrellisBuilder_mux_42_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
mux_42_6_1_1_U75(
    .din0(prevState_V_0_1_reload),
    .din1(prevState_V_1_1_reload),
    .din2(prevState_V_2_5_reload),
    .din3(prevState_V_3_5_reload),
    .din4(trunc_ln1065_fu_814_p1),
    .dout(tmp_18_fu_908_p6)
);

TrellisBuilder_mux_21_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 6 ))
mux_21_6_1_1_U76(
    .din0(tmp_17_fu_894_p6),
    .din1(tmp_18_fu_908_p6),
    .din2(tmp_2_fu_922_p3),
    .dout(tmp_2_fu_922_p4)
);

TrellisBuilder_mux_42_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
mux_42_6_1_1_U77(
    .din0(prevState_V_0_4_reload),
    .din1(prevState_V_1_4_reload),
    .din2(prevState_V_2_reload),
    .din3(prevState_V_3_reload),
    .din4(trunc_ln1065_fu_814_p1),
    .dout(tmp_19_fu_932_p6)
);

TrellisBuilder_mux_42_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
mux_42_6_1_1_U78(
    .din0(prevState_V_0_reload),
    .din1(prevState_V_1_reload),
    .din2(prevState_V_2_4_reload),
    .din3(prevState_V_3_4_reload),
    .din4(trunc_ln1065_fu_814_p1),
    .dout(tmp_20_fu_946_p6)
);

TrellisBuilder_mux_21_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 6 ))
mux_21_6_1_1_U79(
    .din0(tmp_19_fu_932_p6),
    .din1(tmp_20_fu_946_p6),
    .din2(tmp_3_fu_960_p3),
    .dout(tmp_3_fu_960_p4)
);

TrellisBuilder_mux_73_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .din4_WIDTH( 6 ),
    .din5_WIDTH( 6 ),
    .din6_WIDTH( 6 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mux_73_6_1_1_U80(
    .din0(6'd0),
    .din1(6'd0),
    .din2(6'd0),
    .din3(tmp_fu_846_p4),
    .din4(tmp_1_fu_884_p4),
    .din5(tmp_2_fu_922_p4),
    .din6(tmp_3_fu_960_p4),
    .din7(sub_ln1455_fu_800_p2),
    .dout(tmp_4_fu_970_p9)
);

TrellisBuilder_mux_73_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 1 ))
mux_73_1_1_1_U81(
    .din0(1'd0),
    .din1(1'd0),
    .din2(1'd0),
    .din3(choice_reload),
    .din4(choice_1_reload),
    .din5(choice_2_reload),
    .din6(choice_3_reload),
    .din7(sub_ln1455_fu_800_p2),
    .dout(tmp_5_fu_1765_p9)
);

TrellisBuilder_mux_73_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 1 ))
mux_73_1_1_1_U82(
    .din0(1'd0),
    .din1(1'd0),
    .din2(1'd0),
    .din3(choice_5_reload),
    .din4(choice_6_reload),
    .din5(choice_7_reload),
    .din6(choice_8_reload),
    .din7(sub_ln1455_fu_800_p2),
    .dout(tmp_6_fu_1785_p9)
);

TrellisBuilder_mux_73_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 1 ))
mux_73_1_1_1_U83(
    .din0(1'd0),
    .din1(1'd0),
    .din2(1'd0),
    .din3(choice_9_reload),
    .din4(choice_10_reload),
    .din5(choice_11_reload),
    .din6(choice_12_reload),
    .din7(sub_ln1455_fu_800_p2),
    .dout(tmp_7_fu_1805_p9)
);

TrellisBuilder_mux_73_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 1 ))
mux_73_1_1_1_U84(
    .din0(1'd0),
    .din1(1'd0),
    .din2(1'd0),
    .din3(choice_13_reload),
    .din4(choice_14_reload),
    .din5(choice_15_reload),
    .din6(choice_16_reload),
    .din7(sub_ln1455_fu_800_p2),
    .dout(tmp_8_fu_1825_p9)
);

TrellisBuilder_mux_73_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 1 ))
mux_73_1_1_1_U85(
    .din0(1'd0),
    .din1(1'd0),
    .din2(1'd0),
    .din3(choice_17_reload),
    .din4(choice_18_reload),
    .din5(choice_19_reload),
    .din6(choice_20_reload),
    .din7(sub_ln1455_fu_800_p2),
    .dout(tmp_9_fu_1845_p9)
);

TrellisBuilder_mux_73_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 1 ))
mux_73_1_1_1_U86(
    .din0(1'd0),
    .din1(1'd0),
    .din2(1'd0),
    .din3(choice_21_reload),
    .din4(choice_22_reload),
    .din5(choice_23_reload),
    .din6(choice_24_reload),
    .din7(sub_ln1455_fu_800_p2),
    .dout(tmp_s_fu_1865_p9)
);

TrellisBuilder_mux_73_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 1 ))
mux_73_1_1_1_U87(
    .din0(1'd0),
    .din1(1'd0),
    .din2(1'd0),
    .din3(choice_25_reload),
    .din4(choice_26_reload),
    .din5(choice_27_reload),
    .din6(choice_28_reload),
    .din7(sub_ln1455_fu_800_p2),
    .dout(tmp_10_fu_1885_p9)
);

TrellisBuilder_mux_73_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 1 ))
mux_73_1_1_1_U88(
    .din0(1'd0),
    .din1(1'd0),
    .din2(1'd0),
    .din3(choice_29_reload),
    .din4(choice_30_reload),
    .din5(choice_31_reload),
    .din6(choice_32_reload),
    .din7(sub_ln1455_fu_800_p2),
    .dout(tmp_11_fu_1905_p9)
);

TrellisBuilder_mux_83_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 1 ))
mux_83_1_1_1_U89(
    .din0(tmp_5_reg_2064),
    .din1(tmp_6_reg_2069),
    .din2(tmp_7_reg_2074),
    .din3(tmp_8_reg_2079),
    .din4(tmp_9_reg_2084),
    .din5(tmp_s_reg_2089),
    .din6(tmp_10_reg_2094),
    .din7(tmp_11_reg_2099),
    .din8(Bucket_V_1_fu_328),
    .dout(p_Repl2_s_fu_1951_p10)
);

TrellisBuilder_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_1143)) begin
            Bucket_V_1_fu_328 <= 3'd0;
        end else if ((1'b1 == ap_condition_1140)) begin
            Bucket_V_1_fu_328 <= 3'd1;
        end else if ((1'b1 == ap_condition_1136)) begin
            Bucket_V_1_fu_328 <= 3'd2;
        end else if ((1'b1 == ap_condition_1131)) begin
            Bucket_V_1_fu_328 <= 3'd3;
        end else if ((1'b1 == ap_condition_1125)) begin
            Bucket_V_1_fu_328 <= 3'd4;
        end else if ((1'b1 == ap_condition_1118)) begin
            Bucket_V_1_fu_328 <= 3'd5;
        end else if ((1'b1 == ap_condition_1110)) begin
            Bucket_V_1_fu_328 <= 3'd6;
        end else if ((1'b1 == ap_condition_1101)) begin
            Bucket_V_1_fu_328 <= select_ln1483_fu_1717_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            Bucket_V_1_fu_328 <= Bucket_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1452_fu_785_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            count_fu_344 <= add_ln1491_fu_791_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            count_fu_344 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_fu_336 <= 3'd3;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            k_fu_336 <= k_1_fu_1975_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            p_Val2_s_fu_340 <= p_Result_s;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            p_Val2_s_fu_340 <= p_Result_1_fu_1965_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1452_fu_785_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            phi_ln1368_fu_332 <= empty_27_fu_990_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            phi_ln1368_fu_332 <= p_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1452_fu_785_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_10_reg_2094 <= tmp_10_fu_1885_p9;
        tmp_11_reg_2099 <= tmp_11_fu_1905_p9;
        tmp_5_reg_2064 <= tmp_5_fu_1765_p9;
        tmp_6_reg_2069 <= tmp_6_fu_1785_p9;
        tmp_7_reg_2074 <= tmp_7_fu_1805_p9;
        tmp_8_reg_2079 <= tmp_8_fu_1825_p9;
        tmp_9_reg_2084 <= tmp_9_fu_1845_p9;
        tmp_s_reg_2089 <= tmp_s_fu_1865_p9;
    end
end

always @ (*) begin
    if (((icmp_ln1452_fu_785_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_Bucket_V_1_load = Bucket_V;
    end else begin
        ap_sig_allocacmp_Bucket_V_1_load = Bucket_V_1_fu_328;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_count_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_count_1 = count_fu_344;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_phi_ln1368_load = p_reload;
    end else begin
        ap_sig_allocacmp_phi_ln1368_load = phi_ln1368_fu_332;
    end
end

always @ (*) begin
    if (((icmp_ln1452_fu_785_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Val2_1_out_ap_vld = 1'b1;
    end else begin
        p_Val2_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1491_fu_791_p2 = (ap_sig_allocacmp_count_1 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1101 = ((icmp_ln1452_fu_785_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (empty_132_fu_1618_p2 == 1'd0) & (empty_117_fu_1528_p2 == 1'd0) & (empty_102_fu_1438_p2 == 1'd0) & (empty_87_fu_1348_p2 == 1'd0) & (empty_72_fu_1258_p2 == 1'd0) & (empty_57_fu_1168_p2 == 1'd0) & (empty_42_fu_1078_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_1110 = ((icmp_ln1452_fu_785_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (empty_132_fu_1618_p2 == 1'd1) & (empty_117_fu_1528_p2 == 1'd0) & (empty_102_fu_1438_p2 == 1'd0) & (empty_87_fu_1348_p2 == 1'd0) & (empty_72_fu_1258_p2 == 1'd0) & (empty_57_fu_1168_p2 == 1'd0) & (empty_42_fu_1078_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_1118 = ((icmp_ln1452_fu_785_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (empty_117_fu_1528_p2 == 1'd1) & (empty_102_fu_1438_p2 == 1'd0) & (empty_87_fu_1348_p2 == 1'd0) & (empty_72_fu_1258_p2 == 1'd0) & (empty_57_fu_1168_p2 == 1'd0) & (empty_42_fu_1078_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_1125 = ((icmp_ln1452_fu_785_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (empty_102_fu_1438_p2 == 1'd1) & (empty_87_fu_1348_p2 == 1'd0) & (empty_72_fu_1258_p2 == 1'd0) & (empty_57_fu_1168_p2 == 1'd0) & (empty_42_fu_1078_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_1131 = ((icmp_ln1452_fu_785_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (empty_87_fu_1348_p2 == 1'd1) & (empty_72_fu_1258_p2 == 1'd0) & (empty_57_fu_1168_p2 == 1'd0) & (empty_42_fu_1078_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_1136 = ((icmp_ln1452_fu_785_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (empty_72_fu_1258_p2 == 1'd1) & (empty_57_fu_1168_p2 == 1'd0) & (empty_42_fu_1078_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_1140 = ((icmp_ln1452_fu_785_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (empty_57_fu_1168_p2 == 1'd1) & (empty_42_fu_1078_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_1143 = ((icmp_ln1452_fu_785_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (empty_42_fu_1078_p2 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_100_fu_1426_p2 = (empty_99_fu_1420_p2 | empty_93_fu_1384_p2);

assign empty_101_fu_1432_p2 = (empty_94_fu_1390_p2 | empty_100_fu_1426_p2);

assign empty_102_fu_1438_p2 = (empty_96_fu_1402_p2 | empty_101_fu_1432_p2);

assign empty_103_fu_1444_p2 = ((tmp_4_fu_970_p9 == 6'd58) ? 1'b1 : 1'b0);

assign empty_104_fu_1450_p2 = ((tmp_4_fu_970_p9 == 6'd55) ? 1'b1 : 1'b0);

assign empty_105_fu_1456_p2 = ((tmp_4_fu_970_p9 == 6'd43) ? 1'b1 : 1'b0);

assign empty_106_fu_1462_p2 = ((tmp_4_fu_970_p9 == 6'd38) ? 1'b1 : 1'b0);

assign empty_107_fu_1468_p2 = ((tmp_4_fu_970_p9 == 6'd25) ? 1'b1 : 1'b0);

assign empty_108_fu_1474_p2 = ((tmp_4_fu_970_p9 == 6'd20) ? 1'b1 : 1'b0);

assign empty_109_fu_1480_p2 = ((tmp_4_fu_970_p9 == 6'd8) ? 1'b1 : 1'b0);

assign empty_110_fu_1486_p2 = (empty_104_fu_1450_p2 | empty_103_fu_1444_p2);

assign empty_111_fu_1492_p2 = ((tmp_4_fu_970_p9 == 6'd5) ? 1'b1 : 1'b0);

assign empty_112_fu_1498_p2 = (empty_110_fu_1486_p2 | empty_105_fu_1456_p2);

assign empty_113_fu_1504_p2 = (empty_112_fu_1498_p2 | empty_106_fu_1462_p2);

assign empty_114_fu_1510_p2 = (empty_113_fu_1504_p2 | empty_107_fu_1468_p2);

assign empty_115_fu_1516_p2 = (empty_114_fu_1510_p2 | empty_108_fu_1474_p2);

assign empty_116_fu_1522_p2 = (empty_115_fu_1516_p2 | empty_109_fu_1480_p2);

assign empty_117_fu_1528_p2 = (empty_116_fu_1522_p2 | empty_111_fu_1492_p2);

assign empty_118_fu_1534_p2 = ((tmp_4_fu_970_p9 == 6'd57) ? 1'b1 : 1'b0);

assign empty_119_fu_1540_p2 = ((tmp_4_fu_970_p9 == 6'd52) ? 1'b1 : 1'b0);

assign empty_120_fu_1546_p2 = ((tmp_4_fu_970_p9 == 6'd40) ? 1'b1 : 1'b0);

assign empty_121_fu_1552_p2 = ((tmp_4_fu_970_p9 == 6'd37) ? 1'b1 : 1'b0);

assign empty_122_fu_1558_p2 = ((tmp_4_fu_970_p9 == 6'd26) ? 1'b1 : 1'b0);

assign empty_123_fu_1564_p2 = ((tmp_4_fu_970_p9 == 6'd23) ? 1'b1 : 1'b0);

assign empty_124_fu_1570_p2 = ((tmp_4_fu_970_p9 == 6'd11) ? 1'b1 : 1'b0);

assign empty_125_fu_1576_p2 = (empty_119_fu_1540_p2 | empty_118_fu_1534_p2);

assign empty_126_fu_1582_p2 = ((tmp_4_fu_970_p9 == 6'd6) ? 1'b1 : 1'b0);

assign empty_127_fu_1588_p2 = (empty_125_fu_1576_p2 | empty_120_fu_1546_p2);

assign empty_128_fu_1594_p2 = (empty_127_fu_1588_p2 | empty_121_fu_1552_p2);

assign empty_129_fu_1600_p2 = (empty_128_fu_1594_p2 | empty_122_fu_1558_p2);

assign empty_130_fu_1606_p2 = (empty_129_fu_1600_p2 | empty_123_fu_1564_p2);

assign empty_131_fu_1612_p2 = (empty_130_fu_1606_p2 | empty_124_fu_1570_p2);

assign empty_132_fu_1618_p2 = (empty_131_fu_1612_p2 | empty_126_fu_1582_p2);

assign empty_27_fu_990_p1 = tmp_4_fu_970_p9[2:0];

assign empty_28_fu_994_p2 = ((tmp_4_fu_970_p9 == 6'd63) ? 1'b1 : 1'b0);

assign empty_29_fu_1000_p2 = ((tmp_4_fu_970_p9 == 6'd50) ? 1'b1 : 1'b0);

assign empty_30_fu_1006_p2 = ((tmp_4_fu_970_p9 == 6'd46) ? 1'b1 : 1'b0);

assign empty_31_fu_1012_p2 = ((tmp_4_fu_970_p9 == 6'd35) ? 1'b1 : 1'b0);

assign empty_32_fu_1018_p2 = ((tmp_4_fu_970_p9 == 6'd28) ? 1'b1 : 1'b0);

assign empty_33_fu_1024_p2 = ((tmp_4_fu_970_p9 == 6'd17) ? 1'b1 : 1'b0);

assign empty_34_fu_1030_p2 = ((tmp_4_fu_970_p9 == 6'd13) ? 1'b1 : 1'b0);

assign empty_35_fu_1036_p2 = (empty_29_fu_1000_p2 | empty_28_fu_994_p2);

assign empty_36_fu_1042_p2 = ((tmp_4_fu_970_p9 == 6'd0) ? 1'b1 : 1'b0);

assign empty_37_fu_1048_p2 = (empty_35_fu_1036_p2 | empty_30_fu_1006_p2);

assign empty_38_fu_1054_p2 = (empty_37_fu_1048_p2 | empty_31_fu_1012_p2);

assign empty_39_fu_1060_p2 = (empty_38_fu_1054_p2 | empty_32_fu_1018_p2);

assign empty_40_fu_1066_p2 = (empty_39_fu_1060_p2 | empty_33_fu_1024_p2);

assign empty_41_fu_1072_p2 = (empty_40_fu_1066_p2 | empty_34_fu_1030_p2);

assign empty_42_fu_1078_p2 = (empty_41_fu_1072_p2 | empty_36_fu_1042_p2);

assign empty_43_fu_1084_p2 = ((tmp_4_fu_970_p9 == 6'd62) ? 1'b1 : 1'b0);

assign empty_44_fu_1090_p2 = ((tmp_4_fu_970_p9 == 6'd51) ? 1'b1 : 1'b0);

assign empty_45_fu_1096_p2 = ((tmp_4_fu_970_p9 == 6'd47) ? 1'b1 : 1'b0);

assign empty_46_fu_1102_p2 = ((tmp_4_fu_970_p9 == 6'd34) ? 1'b1 : 1'b0);

assign empty_47_fu_1108_p2 = ((tmp_4_fu_970_p9 == 6'd29) ? 1'b1 : 1'b0);

assign empty_48_fu_1114_p2 = ((tmp_4_fu_970_p9 == 6'd16) ? 1'b1 : 1'b0);

assign empty_49_fu_1120_p2 = ((tmp_4_fu_970_p9 == 6'd12) ? 1'b1 : 1'b0);

assign empty_50_fu_1126_p2 = (empty_44_fu_1090_p2 | empty_43_fu_1084_p2);

assign empty_51_fu_1132_p2 = ((tmp_4_fu_970_p9 == 6'd1) ? 1'b1 : 1'b0);

assign empty_52_fu_1138_p2 = (empty_50_fu_1126_p2 | empty_45_fu_1096_p2);

assign empty_53_fu_1144_p2 = (empty_52_fu_1138_p2 | empty_46_fu_1102_p2);

assign empty_54_fu_1150_p2 = (empty_53_fu_1144_p2 | empty_47_fu_1108_p2);

assign empty_55_fu_1156_p2 = (empty_54_fu_1150_p2 | empty_48_fu_1114_p2);

assign empty_56_fu_1162_p2 = (empty_55_fu_1156_p2 | empty_49_fu_1120_p2);

assign empty_57_fu_1168_p2 = (empty_56_fu_1162_p2 | empty_51_fu_1132_p2);

assign empty_58_fu_1174_p2 = ((tmp_4_fu_970_p9 == 6'd61) ? 1'b1 : 1'b0);

assign empty_59_fu_1180_p2 = ((tmp_4_fu_970_p9 == 6'd48) ? 1'b1 : 1'b0);

assign empty_60_fu_1186_p2 = ((tmp_4_fu_970_p9 == 6'd44) ? 1'b1 : 1'b0);

assign empty_61_fu_1192_p2 = ((tmp_4_fu_970_p9 == 6'd33) ? 1'b1 : 1'b0);

assign empty_62_fu_1198_p2 = ((tmp_4_fu_970_p9 == 6'd30) ? 1'b1 : 1'b0);

assign empty_63_fu_1204_p2 = ((tmp_4_fu_970_p9 == 6'd19) ? 1'b1 : 1'b0);

assign empty_64_fu_1210_p2 = ((tmp_4_fu_970_p9 == 6'd15) ? 1'b1 : 1'b0);

assign empty_65_fu_1216_p2 = (empty_59_fu_1180_p2 | empty_58_fu_1174_p2);

assign empty_66_fu_1222_p2 = ((tmp_4_fu_970_p9 == 6'd2) ? 1'b1 : 1'b0);

assign empty_67_fu_1228_p2 = (empty_65_fu_1216_p2 | empty_60_fu_1186_p2);

assign empty_68_fu_1234_p2 = (empty_67_fu_1228_p2 | empty_61_fu_1192_p2);

assign empty_69_fu_1240_p2 = (empty_68_fu_1234_p2 | empty_62_fu_1198_p2);

assign empty_70_fu_1246_p2 = (empty_69_fu_1240_p2 | empty_63_fu_1204_p2);

assign empty_71_fu_1252_p2 = (empty_70_fu_1246_p2 | empty_64_fu_1210_p2);

assign empty_72_fu_1258_p2 = (empty_71_fu_1252_p2 | empty_66_fu_1222_p2);

assign empty_73_fu_1264_p2 = ((tmp_4_fu_970_p9 == 6'd60) ? 1'b1 : 1'b0);

assign empty_74_fu_1270_p2 = ((tmp_4_fu_970_p9 == 6'd49) ? 1'b1 : 1'b0);

assign empty_75_fu_1276_p2 = ((tmp_4_fu_970_p9 == 6'd45) ? 1'b1 : 1'b0);

assign empty_76_fu_1282_p2 = ((tmp_4_fu_970_p9 == 6'd32) ? 1'b1 : 1'b0);

assign empty_77_fu_1288_p2 = ((tmp_4_fu_970_p9 == 6'd31) ? 1'b1 : 1'b0);

assign empty_78_fu_1294_p2 = ((tmp_4_fu_970_p9 == 6'd18) ? 1'b1 : 1'b0);

assign empty_79_fu_1300_p2 = ((tmp_4_fu_970_p9 == 6'd14) ? 1'b1 : 1'b0);

assign empty_80_fu_1306_p2 = (empty_74_fu_1270_p2 | empty_73_fu_1264_p2);

assign empty_81_fu_1312_p2 = ((tmp_4_fu_970_p9 == 6'd3) ? 1'b1 : 1'b0);

assign empty_82_fu_1318_p2 = (empty_80_fu_1306_p2 | empty_75_fu_1276_p2);

assign empty_83_fu_1324_p2 = (empty_82_fu_1318_p2 | empty_76_fu_1282_p2);

assign empty_84_fu_1330_p2 = (empty_83_fu_1324_p2 | empty_77_fu_1288_p2);

assign empty_85_fu_1336_p2 = (empty_84_fu_1330_p2 | empty_78_fu_1294_p2);

assign empty_86_fu_1342_p2 = (empty_85_fu_1336_p2 | empty_79_fu_1300_p2);

assign empty_87_fu_1348_p2 = (empty_86_fu_1342_p2 | empty_81_fu_1312_p2);

assign empty_88_fu_1354_p2 = ((tmp_4_fu_970_p9 == 6'd59) ? 1'b1 : 1'b0);

assign empty_89_fu_1360_p2 = ((tmp_4_fu_970_p9 == 6'd54) ? 1'b1 : 1'b0);

assign empty_90_fu_1366_p2 = ((tmp_4_fu_970_p9 == 6'd42) ? 1'b1 : 1'b0);

assign empty_91_fu_1372_p2 = ((tmp_4_fu_970_p9 == 6'd39) ? 1'b1 : 1'b0);

assign empty_92_fu_1378_p2 = ((tmp_4_fu_970_p9 == 6'd24) ? 1'b1 : 1'b0);

assign empty_93_fu_1384_p2 = ((tmp_4_fu_970_p9 == 6'd21) ? 1'b1 : 1'b0);

assign empty_94_fu_1390_p2 = ((tmp_4_fu_970_p9 == 6'd9) ? 1'b1 : 1'b0);

assign empty_95_fu_1396_p2 = (empty_89_fu_1360_p2 | empty_88_fu_1354_p2);

assign empty_96_fu_1402_p2 = ((tmp_4_fu_970_p9 == 6'd4) ? 1'b1 : 1'b0);

assign empty_97_fu_1408_p2 = (empty_95_fu_1396_p2 | empty_90_fu_1366_p2);

assign empty_98_fu_1414_p2 = (empty_97_fu_1408_p2 | empty_91_fu_1372_p2);

assign empty_99_fu_1420_p2 = (empty_98_fu_1414_p2 | empty_92_fu_1378_p2);

assign icmp_ln1065_1_fu_1633_p2 = ((tmp_4_fu_970_p9 == 6'd10) ? 1'b1 : 1'b0);

assign icmp_ln1065_2_fu_1639_p2 = ((tmp_4_fu_970_p9 == 6'd22) ? 1'b1 : 1'b0);

assign icmp_ln1065_3_fu_1645_p2 = ((tmp_4_fu_970_p9 == 6'd27) ? 1'b1 : 1'b0);

assign icmp_ln1065_4_fu_1651_p2 = ((tmp_4_fu_970_p9 == 6'd36) ? 1'b1 : 1'b0);

assign icmp_ln1065_5_fu_1657_p2 = ((tmp_4_fu_970_p9 == 6'd41) ? 1'b1 : 1'b0);

assign icmp_ln1065_6_fu_1663_p2 = ((tmp_4_fu_970_p9 == 6'd53) ? 1'b1 : 1'b0);

assign icmp_ln1065_7_fu_1669_p2 = ((tmp_4_fu_970_p9 == 6'd56) ? 1'b1 : 1'b0);

assign icmp_ln1065_fu_1627_p2 = ((tmp_4_fu_970_p9 == 6'd7) ? 1'b1 : 1'b0);

assign icmp_ln1452_fu_785_p2 = ((ap_sig_allocacmp_count_1 == 3'd4) ? 1'b1 : 1'b0);

assign k_1_fu_1975_p2 = ($signed(k_fu_336) + $signed(3'd7));

assign k_cast_fu_1938_p1 = k_fu_336;

assign or_ln1483_1_fu_1675_p2 = (icmp_ln1065_3_fu_1645_p2 | icmp_ln1065_2_fu_1639_p2);

assign or_ln1483_2_fu_1705_p2 = (or_ln1483_5_fu_1699_p2 | icmp_ln1065_fu_1627_p2);

assign or_ln1483_3_fu_1693_p2 = (icmp_ln1065_5_fu_1657_p2 | icmp_ln1065_4_fu_1651_p2);

assign or_ln1483_4_fu_1687_p2 = (icmp_ln1065_7_fu_1669_p2 | icmp_ln1065_6_fu_1663_p2);

assign or_ln1483_5_fu_1699_p2 = (or_ln1483_4_fu_1687_p2 | or_ln1483_3_fu_1693_p2);

assign or_ln1483_6_fu_1711_p2 = (or_ln1483_fu_1681_p2 | or_ln1483_2_fu_1705_p2);

assign or_ln1483_fu_1681_p2 = (or_ln1483_1_fu_1675_p2 | icmp_ln1065_1_fu_1633_p2);

always @ (*) begin
    p_Result_1_fu_1965_p4 = p_Val2_s_fu_340;
    p_Result_1_fu_1965_p4[k_cast_fu_1938_p1] = |(p_Repl2_s_fu_1951_p10);
end

assign p_Val2_1_out = p_Val2_s_fu_340;

assign select_ln1483_fu_1717_p3 = ((or_ln1483_6_fu_1711_p2[0:0] == 1'b1) ? 3'd7 : ap_sig_allocacmp_Bucket_V_1_load);

assign sub_ln1455_fu_800_p2 = ($signed(3'd6) - $signed(ap_sig_allocacmp_count_1));

assign tmp_1_fu_884_p3 = ap_sig_allocacmp_phi_ln1368_load[32'd2];

assign tmp_2_fu_922_p3 = ap_sig_allocacmp_phi_ln1368_load[32'd2];

assign tmp_3_fu_960_p3 = ap_sig_allocacmp_phi_ln1368_load[32'd2];

assign tmp_fu_846_p3 = ap_sig_allocacmp_phi_ln1368_load[32'd2];

assign trunc_ln1065_fu_814_p1 = ap_sig_allocacmp_phi_ln1368_load[1:0];

endmodule //TrellisBuilder_TrellisBuilder_Pipeline_VITIS_LOOP_1452_1
